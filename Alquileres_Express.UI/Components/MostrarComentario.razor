@rendermode InteractiveServer
@inject CasoDeUsoListarComentarios casoDeUsoListarComentarios
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CasoDeUsoBuscarPersonalPorCorreo CasoDeUsoBuscarPersonalPorCorreo
@inject CasoDeUsoBuscarClientePorCorreo CasoDeUsoBuscarClientePorCorreo
@inject CasoDeUsoEliminarComentario CasoDeUsoEliminarComentario
@inject CasoDeUsoAgregarComentario CasoDeUsoAgregarComentario
@inject CasoDeUsoEditarComentario CasoDeUsoEditarComentario
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Authorization

<div class="comentario-card">
    <div class="comentario-header">
        <span class="autor">@Comentario.NombreUsuario 
            @if (Comentario.Editado)
            {
                <span class="editado">(Editado)</span>
            }
        </span>
        <span class="fecha">@Comentario.Fecha.ToString("dd/MM/yyyy HH:mm")</span>
    </div>
    <div class="comentario-texto">@Comentario.Texto</div>
    
    @if (usuario != null)
    { 
        <div class="comentario-acciones">
        @if (esAutorDelComentario)
            {
            <button class="btn-editar" @onclick="()=>ToggleFormularioEdicion(Comentario.Id)">
                @((mostrarFormularioEdicionDeComentario) ? "Cancelar" : "Editar")
            </button>                
            <button class="btn-eliminar" @onclick="() => OnEliminar.InvokeAsync(Comentario.Id)">Eliminar</button>
            }
        else if (puedeEliminar)
            {
                <button class="btn-eliminar" @onclick="() => OnEliminar.InvokeAsync(Comentario.Id)">Eliminar</button>
            }
        </div>
        @if (mostrarFormularioEdicionDeComentario)
        {
            <div class="formulario-comentario">
                <textarea placeholder="Edita tu comentario..." @bind="comentarioEditado.Texto"></textarea>
            </div>
            <button class="btn-editar" @onclick="()=>EditarComentario(comentarioEditado)">Guardar</button>
            @foreach (var error in erroresEdicion)
            {
                <div class="alert alert-danger">@error</div>
            }
        }


        <button class="btn-responder" @onclick="()=>ToggleFormularioRespuesta(Comentario.Id)">
            @((mostrarFormularioRespuestaDeComentario) ? "Cancelar" : "Responder")
        </button>

        @if (mostrarFormularioRespuestaDeComentario)
        {
            <div class="formulario-comentario">
                <textarea placeholder="Escribe tu comentario..." @bind="respuesta.Texto"></textarea>
            </div>
            <button class="btn-agregar" @onclick="()=>AgregarRespuesta(respuesta, Comentario)">Agregar comentario</button>

            @foreach (var error in errores)
            {
                <div class="alert alert-danger">@error</div>
            }
        }
    }
    
    @if (Comentario.Respuestas!.Count > 0)
    {
        <button class="btn-responder" @onclick="ToggleMostrarRespuestas">Ver respuestas</button>
        @if (mostrarRespuestas)
        {
            <div class="comentarios-container">
                <h6 style="color:black;">Respuestas</h6>
                @foreach (var respuesta in Comentario.Respuestas)
                {
                    <MostrarComentario InmuebleDelComentarioOriginal=InmuebleDelComentarioOriginal Comentario="respuesta" Correo="@Correo" OnEliminar="EliminarComentario" />
                }
            </div>
        }
    }
</div>
@code
{
    [Parameter]
    public Comentario Comentario {get; set;} = new Comentario();
    [Parameter]
    public int? InmuebleId { get; set; }
    [Parameter]
    public int InmuebleDelComentarioOriginal { get; set; }
    [Parameter]
    public string Correo {get; set;} = "";
    [Parameter] 
    public EventCallback<int> OnEliminar { get; set; }
    private Usuario? usuario;
    private bool mostrarRespuestas = false;
    private bool mostrarFormularioRespuestaDeComentario;
    private bool mostrarFormularioEdicionDeComentario;
    private List<string> errores = [];
    private List<string> erroresEdicion = [];
    private Comentario nuevoComentario = new ();
    private Comentario comentarioEditado = new ();
    private Comentario respuesta = new ();
    private bool esAutorDelComentario;
    private bool puedeEliminar;
    protected override void OnParametersSet()
    {
        if (InmuebleId != null && InmuebleId <= 0)
        {
            throw new ArgumentException("El Id del inmueble debe ser mayor que cero.", nameof(InmuebleId));
        }
        
        usuario = (Usuario?)CasoDeUsoBuscarClientePorCorreo.Ejecutar(Correo) ??
                 (Usuario?) CasoDeUsoBuscarPersonalPorCorreo.Ejecutar(Correo);
        nuevoComentario = InicializarComentario();
        esAutorDelComentario =
        (usuario != null && 
         ((usuario.Rol == RolUsuario.Cliente && Comentario.ClienteId == usuario.Id) ||
          (usuario.Rol != RolUsuario.Cliente && Comentario.PersonalId == usuario.Id)));
        puedeEliminar = (usuario != null && usuario.Rol != RolUsuario.Cliente && Comentario.RolUsuario != RolUsuario.Gerente);
    }
    private void ToggleMostrarRespuestas()
    {
        mostrarRespuestas = !mostrarRespuestas;
        StateHasChanged();
    }
    private void ToggleFormularioRespuesta(int comentarioId)
    {
        if (mostrarFormularioRespuestaDeComentario)
        {
            mostrarFormularioRespuestaDeComentario = false; // Ocultar el formulario
            errores.Clear();
        }
        else
        {
            mostrarFormularioRespuestaDeComentario = true; // Mostrar el formulario para ese comentario
            respuesta = InicializarComentario(); 
            respuesta.ComentarioId = comentarioId; 
            respuesta.InmuebleId = null;
        }
        StateHasChanged();
    }
    private void ToggleFormularioEdicion(int comentarioId)
    {
        if (mostrarFormularioEdicionDeComentario)
        {
            mostrarFormularioEdicionDeComentario = false;
            erroresEdicion.Clear();
        }
        else
        {
            mostrarFormularioEdicionDeComentario = true; 
            comentarioEditado = new Comentario
            {
                Id = Comentario.Id,
                Texto = Comentario.Texto,
                Fecha = DateTime.Now,
            };
        }
        StateHasChanged();
    }

    private void AgregarRespuesta(Comentario respuesta, Comentario respondido)
    {
        errores.Clear();
        if (CasoDeUsoAgregarComentario.Ejecutar(respuesta, out errores))
        {
            mostrarFormularioRespuestaDeComentario = false; // Ocultar el formulario despuÃ©s de agregar
            respondido.Respuestas!.Add(respuesta);
        }
        respuesta = InicializarComentario();
        respuesta.InmuebleId = null;
        StateHasChanged();
    }

    private Comentario InicializarComentario()
    {
        if (usuario == null)
        {
            return new Comentario();
        }
        Comentario c;
        if (usuario!.Rol == RolUsuario.Cliente)
        {
            c = new Comentario()
            {
                InmuebleId = InmuebleId,
                RolUsuario = usuario!.Rol,
                ClienteId = usuario!.Id,
                NombreUsuario = usuario!.Nombre + " " + usuario!.Apellido, 
            };
        }
        else
        {
            c = new Comentario()
            {
                InmuebleId = InmuebleId,
                RolUsuario = usuario!.Rol,
                PersonalId = usuario!.Id,
                NombreUsuario = usuario!.Nombre + " " + usuario!.Apellido, 
            };
        }
        c.Fecha = DateTime.Now;
        return c;
    }

    
    private void EditarComentario(Comentario c)
    {
        
        erroresEdicion.Clear();
        if (c.Texto.Equals(Comentario.Texto))
        {
            mostrarFormularioEdicionDeComentario = false;
        }
        else
            if (CasoDeUsoEditarComentario.Ejecutar(c, out erroresEdicion))
            {
                mostrarFormularioEdicionDeComentario = false;
                Comentario.Texto = c.Texto;
                Comentario.Fecha = c.Fecha;
                Comentario.Editado = true;
                c = new Comentario();
            }
        StateHasChanged();
    }

    private async Task EliminarComentario(int id)
    {
        if (await CasoDeUsoEliminarComentario.EjecutarAsync(id))
        {
            Comentario comentario = Comentario.Respuestas!.FirstOrDefault(c => c.Id == id)!;
            Comentario.Respuestas!.Remove(comentario);
        }
        StateHasChanged();
        //NavigationManager.NavigateTo($"/inmueble/{InmuebleDelComentarioOriginal}/?mensaje=Error al eliminar el comentario.&esMensajeDeError=true", true);
        
    }
}