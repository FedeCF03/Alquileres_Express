@page "/cambiar-estado-inmueble/{id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoObtenerInmueble casoDeUsoObtenerInmueble
@inject CasoDeUsoEditarInmueble casoDeUsoEditarInmueble
@inject IRepositorioFoto repositorioFotos
@inject ServicioFotos ServicioFotos
@inject IJSRuntime JS
@inject NavigationManager Nav
@inject ValidadorInmueble ValidadorInmueble
@attribute [Authorize(Roles = "Gerente,Empleado")]

<div class="container mt-5">
    <div class="card shadow-lg p-4 rounded-4">
        <h2 class="mb-4 text-center text-primary">Cambiar disponibilidad del inmueble</h2>

        <div class="form-check form-switch mb-4 d-flex align-items-center justify-content-center gap-3">
            <input type="checkbox" class="form-check-input fs-4" id="disponibleSwitch" @bind="disponible" />
            <label class="form-check-label fs-5" for="disponibleSwitch">
                @(disponible ? "Disponible" : "No disponible")
            </label>
        </div>

        @if (errores.Any())
        {
            <div class="alert alert-danger" role="alert">
                <ul class="mb-0">
                    @foreach (var error in errores)
                    {
                        <li>@error</li>
                    }
                </ul>
            </div>
        }

        <div class="d-flex justify-content-center gap-3 mt-3">
            <button class="btn btn-success px-4" @onclick="GuardarCambios">
                Guardar cambios
            </button>
            <button class="btn btn-outline-secondary px-4" @onclick="@(() => Nav.NavigateTo($"/inmueble/{inmueble.Id}"))">
                Cancelar
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private Inmueble inmueble = new();
    private bool disponible;
    private List<string> errores = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            inmueble = casoDeUsoObtenerInmueble.Ejecutar(id);
            disponible = inmueble.Disponible;
        }
        catch
        {
            Nav.NavigateTo("/?mensaje=Inmueble no encontrado&EsMensajeDeError=true");
        }
    }

    private async Task GuardarCambios()
    {
        inmueble.Disponible = disponible;
        casoDeUsoEditarInmueble.Ejecutar(inmueble, RolUsuario.Gerente, out errores);

        if (!errores.Any())
        {
            Nav.NavigateTo($"/?mensaje=Estado de inmueble modificado exitosamente");
        }
    }
}
