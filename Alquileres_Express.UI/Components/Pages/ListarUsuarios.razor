@page "/listadoUsuario"
@rendermode InteractiveServer   
@inject CasoDeUsoListarUsuarios casoDeUsoListarUsuarios
@inject CasoDeUsoListarRestringido casoDeUsoListarRestringido
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrador,Gerente,Empleado")]  

<div class="container mt-4">
    <div class="card shadow p-4">
        <h2 class="text-center text-primary">ðŸ“‹ Listado de Usuarios</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger text-center">@ErrorMessage</div>
        }
        else if (_lista == null || _lista.Count == 0)
        {
            <p class="text-center text-muted">No se encontraron usuarios.</p>
        }
        else
        {
            <table class="table table-striped table-hover text-center">
                <thead class="table-dark">
                    <tr>
                        <th>NOMBRE</th>
                        <th>APELLIDO</th>
                        <th>CORREO</th>
                        <th>FECHA DE NACIMIENTO</th>
                        <th>ROL</th>
                        <th>NÃšMERO DE PERSONAL</th>
                        <th>ACCIÃ“N</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in _lista)
                    {
                        <tr>
                            <td>@usuario.Nombre</td>
                            <td>@usuario.Apellido</td>
                            <td>@usuario.Correo</td>
                            <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                            <td>
                                <span class="badge @(GetBadgeClass(usuario.Rol))">@usuario.Rol</span>
                            </td>
                            <td>
                                @if (usuario.Rol == RolUsuario.Empleado || usuario.Rol == RolUsuario.Gerente || usuario.Rol == RolUsuario.Administrador)
                                {
                                    <span class="fw-bold text-success">@usuario.Id</span>
                                }
                                else
                                {
                                    <span class="text-muted">No tiene</span>
                                }
                            </td>
                            <td>
                                <NavLink class="nav-link" href="@($"/verUsuario/?{(usuario.Rol == RolUsuario.Cliente ? "clienteid" : "personalid")}={usuario.Id}")">
                                    <button class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye"></i> Ver usuario
                                    </button>
                                </NavLink>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    List<Usuario> _lista = new List<Usuario>();
    string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Administrador") || user.IsInRole("Gerente"))
            {
                _lista = casoDeUsoListarUsuarios.Ejecutar();
            }
            else if (user.IsInRole("Empleado"))
            {
                _lista = casoDeUsoListarRestringido.Ejecutar();
            }
            else
            {
                ErrorMessage = "No tiene permisos para acceder a esta funcionalidad.";
            }
        }
        else
        {
            ErrorMessage = "Debe iniciar sesiÃ³n para acceder a esta funcionalidad.";
        }
    }

    private string GetBadgeClass(RolUsuario rol)
    {
        return rol switch
        {
            RolUsuario.Administrador => "bg-danger",
            RolUsuario.Gerente => "bg-warning text-dark",
            RolUsuario.Empleado => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }
}