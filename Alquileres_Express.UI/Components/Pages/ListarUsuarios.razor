@page "/listadoUsuario"
@rendermode InteractiveServer
@inject CasoDeUsoListarUsuarios casoDeUsoListarUsuarios
@inject CasoDeUsoListarRestringido casoDeUsoListarRestringido
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Gerente,Empleado")]
@page "/search"
@inject CasoDeUsoPersonalDescenderGerente casoDeUsoBuscarPersonalDescenderGerente

@inject CasoDeUsoAscenderAGerente casoDeUsoBuscarPersonalAscenderAGerente
@inject CasoDeUsoEliminarPersonal casoDeUsoEliminarPersonal

<div class="search-container">
    <input type="text" @bind="searchTerm" @onkeypress="OnKeyPress" placeholder="Buscar..." class="search-input" />
    <button @onclick="PerformSearch" class="search-button">Buscar</button>
</div>


<div class="container mt-4">
    <div class="card shadow p-4">
        <h2 class="text-center text-primary">ðŸ“‹ Listado de Usuarios</h2>

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger text-center">@ErrorMessage</div>
        }
        else if (_lista == null || _lista.Count == 0)
        {
            <p class="text-center text-muted">No se encontraron usuarios.</p>
        }
        else
        {
            <table class="table table-striped table-hover text-center">
                <thead class="table-dark">
                    <tr>
                        <th>NOMBRE</th>
                        <th>APELLIDO</th>
                        <th>CORREO</th>
                        <th>FECHA DE NACIMIENTO</th>
                        <th>ROL</th>
                        <th>NÃšMERO DE PERSONAL</th>
                        <th>ACCIÃ“N</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var usuario in _listaBusqueda)
    {
        <tr>
            <td class="text-center align-middle">@usuario.Nombre</td>
            <td class="text-center align-middle">@usuario.Apellido</td>
            <td class="text-center align-middle">@usuario.Correo</td>
            <td class="text-center align-middle">@usuario.FechaNacimiento.ToShortDateString()</td>
            <td class="text-center align-middle">
                <span class="badge @(GetBadgeClass(usuario.Rol))">@usuario.Rol</span>
            </td>
            <td class="text-center align-middle">
                @if (usuario.Rol == RolUsuario.Empleado || usuario.Rol == RolUsuario.Gerente )
                {
                    <span class="fw-bold text-success">@usuario.Id</span>
                }
                else
                {
                    <span class="text-muted">-</span>
                }
            </td>
            <td class="text-center align-middle" style="width: 100%;">
                <div class="d-flex justify-content-evenly flex-wrap gap-2">
                    <NavLink class="nav-link"
                             href="@($"/verUsuario/?{(usuario.Rol == RolUsuario.Cliente ? "clienteid" : "personalid")}={usuario.Id}")">
                        <button class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-eye"></i> Ver usuario
                        </button>
                    </NavLink>

                    <AuthorizeView Roles="Gerente">
                        <Authorized>
                            @if (usuario.Rol == RolUsuario.Gerente)
                            {
                                <button class="btn btn-sm btn-outline-primary"
                                        @onclick="() => DescenderGerente(usuario.Id)">
                                    <i class="fas fa-arrow-down"></i> Descender a Empleado
                                </button>
                            }
                            @if (usuario.Rol == RolUsuario.Gerente || usuario.Rol == RolUsuario.Empleado)
                            {
                                <button class="btn btn-sm btn-outline-danger"
                                        @onclick="() => DarDeBaja(usuario.Id)">
                                    <i class="fas fa-user-slash"></i> Dar de baja
                                </button>
                            }
                            @if (usuario.Rol == RolUsuario.Empleado)
                            {
                                <button class="btn btn-sm btn-outline-success"
                                        @onclick="() => AscenderAGerente(usuario.Id)">
                                    <i class="fas fa-arrow-up"></i> Ascender a Gerente
                                </button>
                            }
                        </Authorized>
                    </AuthorizeView>
                </div>
            </td>
        </tr>
    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    List<Usuario> _lista = new List<Usuario>();
    List<Usuario> _listaBusqueda = new List<Usuario>();

    string? ErrorMessage;
    private string searchTerm = "";

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            _listaBusqueda = _lista
            .Where(item => item.Nombre.Contains(searchTerm,
            StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            _listaBusqueda.Clear();
            _listaBusqueda.AddRange(_lista);
        }
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            PerformSearch();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var correo = authState.User.Identity.Name;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            if (user.IsInRole("Gerente"))
            {
                _lista = casoDeUsoListarUsuarios.Ejecutar();
            }
            else if (user.IsInRole("Empleado"))
            {
                _lista = casoDeUsoListarRestringido.Ejecutar();
            }
            else
            {
                ErrorMessage = "No tiene permisos para acceder a esta funcionalidad.";
            }
        }
        else
        {
            ErrorMessage = "Debe iniciar sesiÃ³n para acceder a esta funcionalidad.";
        }
        _lista = _lista
        .Where(item => item.Correo != correo).ToList();
        _listaBusqueda.AddRange(_lista);
    }

    private string GetBadgeClass(RolUsuario rol)
    {
        return rol switch
        {
            RolUsuario.Gerente => "bg-warning text-dark",
            RolUsuario.Empleado => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }

    void DescenderGerente(int id)
    {
        casoDeUsoBuscarPersonalDescenderGerente.Ejecutar(id);
        NavigationManager.NavigateTo("/listadoUsuario", true);
    }
    void DarDeBaja(int id)
    {
        casoDeUsoEliminarPersonal.Ejecutar(id);
        NavigationManager.NavigateTo("/listadoUsuario", true);
    }
    void AscenderAGerente(int id)
    {
        casoDeUsoBuscarPersonalAscenderAGerente.Ejecutar(id);
        NavigationManager.NavigateTo("/listadoUsuario", true);
    }

}
