@page "/listadoIngresos/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
@inject CasoDeUsoObtenerInmueble CasoDeUsoObtenerInmueble





    <div class="date-picker-section">
        <div class="date-picker-container">
            <div class="date-fields">
                <div class="date-field">
                    <label>Comienzo</label>
                    <div class="date-value">@(StartDate?.ToString("dd/M/yyyy") ?? "Seleccionar")
                    </div>
                </div>
                <div class="date-separator"></div>
                    <div class="date-field">
                        <label>Fin</label>
                        <div class="date-value">@(EndDate?.ToString("dd/M/yyyy") ?? "Seleccionar")</div>
                    </div>
                    <DateRangePicker StartDatePlaceholder="Comienzo" EndDatePlaceholder="Fin"
                    @bind-StartDate="StartDate" @bind-EndDate="EndDate"
                    class="hidden-picker"
                    placeholder="Select dates..." OnRangeSelect="Filtrar" />
            </div>   
        </div>
    </div>
        <div class="card shadow p-4">
            <table class="table table-hover table-striped align-middle text-center">
                <thead class="table-primary">
                    <tr>
                        <th>Fecha de pago</th>
                        <th>Monto</th>
                    </tr>
                </thead>
                <tbody id="rentalsTableBody">
                    @foreach(var alquiler in alquileres)
                    {
                        <tr>
                            <td>@alquiler.FechaDeCreacion.ToString("dd/MM/yyyy")</td>
                            <td>@alquiler.Precio.ToString("C2")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


@code{
    [Parameter]
    public int Id { get; set; }

    DateTimeOffset? StartDate { get; set; } 
    DateTimeOffset? EndDate { get; set; } 

    private Inmueble? inmueble = new Inmueble();
    private List<Alquiler> alquileres = new List<Alquiler>();

    protected override void OnParametersSet()
    {
        inmueble = CasoDeUsoObtenerInmueble.Ejecutar(Id);
        alquileres = new List<Alquiler>(inmueble.Alquileres);
    }


    private void Filtrar()
    {
        DateTime fecha1 = StartDate?.UtcDateTime ?? DateTime.MinValue;
        DateTime fecha2 = EndDate?.UtcDateTime ?? DateTime.MinValue;
        List<Alquiler> alquileresFiltrados = new List<Alquiler>();
        alquileres.Clear();
        foreach (var alquiler in inmueble.Alquileres)
        {
            if (alquiler.FechaDeCreacion >= fecha1 && alquiler.FechaDeCreacion <= fecha2)
            {
                alquileresFiltrados.Add(alquiler);
            }
        }
        alquileres.AddRange(alquileresFiltrados);
        StateHasChanged();
    }

}

<style>
    .property-rating i {
        font-size: 1rem;
    }

    .property-rating .text-secondary {
        font-size: 0.9rem;
    }

    .promedio-numero {
        font-size: 1.25rem;
        /* o probá con 1.3rem si querés más presencia */
        font-weight: 600;
        color: #343a40;
        /* o el color que combine con tu estética */
    }

    .hidden-picker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>