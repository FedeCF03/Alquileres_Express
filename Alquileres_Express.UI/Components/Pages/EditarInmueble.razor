@page "/editar-inmueble/{id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoObtenerInmueble casoDeUsoObtenerInmueble
@inject CasoDeUsoEditarInmueble casoDeUsoEditarInmueble
@inject IRepositorioFoto repositorioFotos
@inject ServicioFotos ServicioFotos
@inject IJSRuntime JS
@inject NavigationManager Nav


<div class="contenedor">


    <main class="contenido">
        <section class="info-propiedad">
                <h1>Nombre</h1>
                <input placeholder="@inmueble.Nombre" type="text" @bind="inmuebleAuxiliar.Nombre" class="form-control mb-2" />

                <h2>Direccion</h2>
                <input type="text" @bind="inmuebleAuxiliar.Direccion" class="form-control mb-2" />
 
            <div class="precio">
                <input type="number" @bind="inmueble.Precio" class="form-control mb-2" />
            </div>
        </section>

        <section class="galeria">
            <InputFile @key=@(inputFileId) OnChange="CaptureFiles" multiple/>
            <button @onclick="GuardarFotos" class="btn btn-primary">Subir fotos</button>
            <div class="image-list">
                @foreach (var foto in fotos)
                {
                    <div class="image-card">
                        <img src="@foto.Url" />
                        <button @onclick="()=>EliminarFoto(foto)">Eliminar</button>
                    </div>
                }
            </div>

        </section>
        <section class="detalles">
            <h4>Detalles</h4>
            <ul>
                <li><strong>Tipo:</strong>@inmueble.Ciudad</li>
                <li><strong>Tipo:</strong>@inmueble.TipoInmueble.ToString()</li>
                <li><strong>Cantidad de baños: @inmueble.Banios</strong> 1</li>
                <li><strong>Cantidad de Camas: @inmueble.CantidadDeCamas </strong> 1</li>
                <li><strong>Otras características:</strong> Cocina - Balcón</li>
            </ul>
        </section>
    
   


 <img src="/images/fotosInmuebles/oxouzdoi.png" alt="Foto propiedad" class="foto" />
<div id="map" style="height: 400px; width: 80%;">
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB_9xydGamrZY4fHXdj39zwJPV-4FCUzbQ&callback=initializeMap" async
    defer></script>
<script>
    function initializeMap(dotNetHelper, lat, lng) {
        const initialPosition = { lat: lat, lng: lng }; // Coordenadas de Buenos Aires

        const map = new google.maps.Map(document.getElementById("map"), {
            center: initialPosition,
            zoom: 12,
        });

        const marker = new google.maps.Marker({
            position: initialPosition,
            map: map,
            draggable: true,
        });

        // Actualizar coordenadas al mover el marcador
        marker.addListener("dragend", () => {
            const position = marker.getPosition();
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', position.lat(), position.lng());
        });

        // Permitir al usuario colocar un nuevo marcador al hacer clic en el mapa
        map.addListener("click", (event) => {
            marker.setPosition(event.latLng);
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', event.latLng.lat(), event.latLng.lng());
        });
    }
</script>
</div>
</main>
</div>
<button class="btn btn-primary" @onclick="GuardarCambios">Guardar Cambios</button>
<button class="btn btn-danger" @onclick="@(() => Nav.NavigateTo($"/inmueble/{inmueble.Id}"))">Cancelar</button>
@if (errores.Count > 0)
    {
        <div class="alert alert-danger">
            @foreach (var error in errores)
            {
                <p>@error</p>
            }
        </div>
    }
@if (errorPorFaltaDeFotos != string.Empty)
    {
        <div class="alert alert-danger">
            <p>@errorPorFaltaDeFotos</p>
        </div>
    }

@if (mensajeError != string.Empty)
    {
        <div class="alert alert-danger">
            <p>@mensajeError</p>
        </div>
    }



@code {
    private int fotoActual = 0;
    private string[] imagenes = new string[0];
    [Parameter]
    public int Id { get; set; }
    private Inmueble inmueble = new Inmueble();
    private string mensajeError = string.Empty;
    public HttpContext? HttpContext { get; set; }
    private long maxFileSize = 1024 * 1024 * 5; // 5 MB
    private int maxAllowedFiles = 30;
    private List<String> errores = new();
    private string errorPorFaltaDeFotos = string.Empty;
    private List<Foto> fotos = [];
    private List<Foto> fotosEliminadas = [];
    private Guid inputFileId = Guid.NewGuid();
    private InputFileChangeEventArgs? browser;

    private Inmueble inmuebleAuxiliar = new Inmueble();

    void FotoSiguiente()
    {
        fotoActual = (fotoActual + 1) % imagenes.Length;
        StateHasChanged();
    }

    void FotoAnterior()
    {
        fotoActual = (fotoActual - 1 + imagenes.Length) % imagenes.Length;
        StateHasChanged();
    }
    

    protected override void OnParametersSet()
    {
        try
        {
            inmueble = casoDeUsoObtenerInmueble.Ejecutar(Id);
            inmuebleAuxiliar = new Inmueble
            {
                Id = inmueble.Id,
                Nombre = inmueble.Nombre,
                Direccion = inmueble.Direccion,
                Precio = inmueble.Precio,
                Ciudad = inmueble.Ciudad,
                TipoInmueble = inmueble.TipoInmueble,
                Banios = inmueble.Banios,
                CantidadDeCamas = inmueble.CantidadDeCamas,
                CoordLat = inmueble.CoordLat,
                CoordLong = inmueble.CoordLong
            };

           fotos = inmueble.Fotos ?? [];
        }
        catch (Exception)
        {
            Nav.NavigateTo("/");
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeMap", dotNetRef, @inmuebleAuxiliar.CoordLat, @inmuebleAuxiliar.CoordLong);
        }
    }
    [JSInvokable]
    public void ActualizarCoordenadas(double lat, double lng)
    {
        inmuebleAuxiliar.CoordLat = lat;
        inmuebleAuxiliar.CoordLong = lng;
        StateHasChanged(); 
    }

    
    private void GuardarCambios()
    {
        inmueble.CoordLat = inmuebleAuxiliar.CoordLat;
        inmueble.CoordLong = inmuebleAuxiliar.CoordLong;
        inmueble.Nombre = inmuebleAuxiliar.Nombre;
        inmueble.Direccion = inmuebleAuxiliar.Direccion;
        inmueble.Precio = inmuebleAuxiliar.Precio;
        inmueble.Ciudad = inmuebleAuxiliar.Ciudad;
        inmueble.TipoInmueble = inmuebleAuxiliar.TipoInmueble;
        inmueble.Banios = inmuebleAuxiliar.Banios;
        inmueble.CantidadDeCamas = inmuebleAuxiliar.CantidadDeCamas;

        if (fotos.Count == 0)
        {
            errorPorFaltaDeFotos = "Debe cargar al menos una foto del inmueble.";
            StateHasChanged();
            return;
        }   
        if (errores.Count == 0 & casoDeUsoEditarInmueble.Ejecutar(inmueble,RolUsuario.Gerente, out mensajeError)){
            ServicioFotos.EliminarFotosPorInmueble(inmueble.Id);
            ServicioFotos.EliminarFotosDelDirectorio(fotosEliminadas);
            ServicioFotos.PersistirFotos(fotos, inmueble.Id);
            Nav.NavigateTo("/inmuebles");
        }
    }

    private void EliminarFoto(Foto foto)
    {
        fotos.Remove(foto);
        fotosEliminadas.Add(foto);
    }
    
    private async Task GuardarFotos()
    {
        try
        {
            errores.Clear();
            if (browser == null || browser.FileCount == 0)
            {
                errores.Add("No se ha seleccionado ningún archivo.");
                return;
            }
            errorPorFaltaDeFotos = string.Empty;

            if (browser.FileCount > maxAllowedFiles)
            {
                errores.Add($"No se pueden cargar más de {maxAllowedFiles} archivos.");
                return;
            }   
            foreach(var file in browser.GetMultipleFiles(maxAllowedFiles))
            {
                try{
                    if (file.Size > maxFileSize)
                    {
                        errores.Add($"El archivo {file.Name} excede el tamaño máximo permitido de 5 MB y no se podrá agregar. Por favor elija otra foto");
                        return;
                    }
                    else
                    {
                        crearArchivo(file);
                    }

                }
                catch (Exception ex)
                {
                    errores.Add($"Error al cargar el archivo {file.Name}: {ex.Message}");
                }
            }
        }
        finally 
        {
            inputFileId = Guid.NewGuid();
            StateHasChanged();
        }
    }
    private async Task CaptureFiles(InputFileChangeEventArgs e)
    {
        browser = e;
    }

    private async void crearArchivo(IBrowserFile file)
    {
        string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(), 
                    Path.GetExtension(file.Name));
                    
                var pathFotosInmuebles = Path.GetFullPath(
                    Path.Combine(
                        Directory.GetCurrentDirectory(),
                       "wwwroot", "images","fotosInmuebles"));

                Directory.CreateDirectory(pathFotosInmuebles);

                var path = Path.Combine(pathFotosInmuebles, newFileName);
        
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fotos.Add(new Foto
                {
                    Url = $"/images/fotosInmuebles/{newFileName}",
                    Nombre = newFileName,
                });
                StateHasChanged();
    }

}
}
<style>
    .image-list {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

.image-card {
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
}
</style>

=======
        Latitud = lat;
        Longitud = lng;
        StateHasChanged(); 
