@page "/registrar-alquiler/{id:int}"
@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoAlquiler
@using Alquileres_Express.Aplicacion.CasosDeUso
@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoPagarEfectivo
@using Alquileres_Express.Aplicacion.Entidades
@using Alquileres_Express.Repositorios.Context
@using Microsoft.EntityFrameworkCore
@using BlazorDateRangePicker
@inject CasoDeUsoObtenerInmueble casoDeUsoObtenerInmueble
@rendermode InteractiveServer
@inject NavigationManager Navegador
@inject CasoDeUsoRegistrarAlquilerPresencial casoDeUsoRegistrarAlquiler
@inject CasoDeUsoBuscarCliente casoDeUsoBuscarCliente
@inject CasoDeUsoBuscarPersonal casoDeUsoBuscarPersonal
@inject CasoDeUsoPagarEfectivo casoDeUsoPagarEfectivo
@inject CasoDeUsoRegistrarEntregaPresencial casoDeUsoRegistrarEntrega


@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="card">
    <h3 class="card-title">Registrar Alquiler Presencial</h3>

    <div class="mb-2">
        <label>Correo del Cliente</label>
        <input @bind="correoCliente" class="form-control" />
    </div>

    <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate"
                         DaysEnabledFunction="(d)=>!NoEsHabil(d)"
                         class="form-control form-control-sm"
                         placeholder="Seleccionar fechas..."
                         OnRangeSelect="VerificarFechas" />

    <div class="mb-2">
        <label>Número de Personal</label>
        <InputNumber @bind-Value="numeroPersonal" class="form-control" />
    </div>
    
    <div class="mt-3">
        <button disabled=""class="btn btn-secondary" @onclick="RegistrarPagoEfectivo">
            Registrar alquiler
        </button>
        @if (!podesPagar)
            {
                <button class="btn btn-primary mt-3" disabled>Registrar alquiler</button>
            }
            else
            {
                <div class="text-success">Precio total: $@calcularPrecio(StartDate.Value.DateTime, EndDate.Value.DateTime, inmueble.Precio).ToString("F2")</div>
                <button class="btn btn-primary mt-3" @onclick="RegistrarPagoEfectivo">Registrar alquiler</button>
            }
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; } // Recibe el ID del inmueble desde la URL

    private string correoCliente = "";
    private int numeroPersonal;
    private string ErrorMessage = "";
    DateTimeOffset? StartDate { get; set; }
    DateTimeOffset? EndDate { get; set; }
    private List<RangoDeFechas> FechasReservadas { get; set; } = [];
    private string mensajeError = string.Empty;
    private bool podesPagar { get; set; } = false;
    private Inmueble? inmueble;
    Alquileres_ExpressContext _context = new Alquileres_ExpressContext();
    private decimal calcularPrecio(DateTime fechaInicio, DateTime fechaFin, decimal? monto)
    {
        if (monto == null)
            throw new ArgumentException("El monto debe tener valor");
        int dias = (int)(fechaFin - fechaInicio).TotalDays + 1;
        decimal precioTotal = dias * monto.Value;
        return precioTotal;
    }
    protected override void OnParametersSet()
    {
        try
        {
           inmueble = casoDeUsoObtenerInmueble.Ejecutar(Id);
            CrearRangosDeFechaReservados(inmueble.Alquileres);


        }
        catch (Exception)
        {
            // Manejo de errores, por ejemplo, redirigir a una página de error o mostrar un mensaje
            Navegador.NavigateTo("/?mensaje=Inmueble no encontrado");
        }
    }

    private void RegistrarPagoEfectivo()
    {
        try
        {
            if (StartDate == null || EndDate == null)
            {
                ErrorMessage = "Debe seleccionar un rango de fechas.";
                return;
            }
            //validando
            casoDeUsoRegistrarAlquiler.Ejecutar(correoCliente, Id, StartDate.Value.DateTime, EndDate.Value.DateTime, numeroPersonal);
            
            Alquileres_ExpressContext _context = new Alquileres_ExpressContext();
            
            decimal precio = calcularPrecio(StartDate.Value.DateTime, EndDate.Value.DateTime, inmueble!.Precio);
            Personal personal = _context.Personal.FirstOrDefault(p => p.Id == numeroPersonal)!;
            Cliente cliente = _context.Clientes.FirstOrDefault(c => c.Correo == correoCliente)!;
            Alquiler alquiler = new Alquiler(correoCliente, StartDate.Value.DateTime, EndDate.Value.DateTime, precio, Id, personal.Nombre, personal.Apellido);
            //RegistroDeLlave registro = casoDeUsoRegistrarEntrega.Ejecutar(alquiler.Id, personal.Id, cliente.Id);
            //alquiler.Entrega = registro;

            // Llama al caso de uso para registrar el pago en efectivo
            casoDeUsoPagarEfectivo.PagarEfectivo(alquiler);
            ErrorMessage = "Alquiler registrado exitosamente.";
            Navegador.Refresh();
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
    private void CrearRangosDeFechaReservados(List<Alquiler> alquileres)
    {
        FechasReservadas.Clear();
        alquileres.Where(a => !a.Cancelado &&
        !a.GetEstadoDeAlquiler().Equals(EstadoDeAlquiler.Terminado) && a.Pagado).ToList().ForEach(alquiler =>
        {
            FechasReservadas.Add(new RangoDeFechas(alquiler.FechaDeInicio, alquiler.FechaDeFin));
        });
    }
    private bool NoEsHabil(DateTimeOffset date)
    {
        return FechasReservadas.Any(rango => rango.Contains(date.Date)) || date.Date < DateTime.Today;
    }

    private void VerificarFechas()
    {
        if (StartDate == null || EndDate == null)
        {
            mensajeError = "Debe seleccionar un rango de fechas.";
            podesPagar = false;
            return;
        }
        for (DateTime date = StartDate.Value.Date; date <= EndDate.Value.Date; date = date.AddDays(1))
        {
            if (NoEsHabil(date))
            {
                mensajeError = $"La fecha {date.ToShortDateString()} ya está reservada.";
                StateHasChanged();
                podesPagar = false;
                return;
            }
        }
        mensajeError = string.Empty;
        podesPagar = true;


    }
}

