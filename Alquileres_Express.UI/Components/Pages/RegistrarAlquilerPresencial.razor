@page "/registrar-alquiler/{id:int}"
@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoAlquiler
@using Alquileres_Express.Aplicacion.CasosDeUso
@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoPagarEfectivo
@using Alquileres_Express.Aplicacion.Entidades
@using Alquileres_Express.Repositorios.Context
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer
@inject NavigationManager Navegador
@inject CasoDeUsoRegistrarAlquilerPresencial casoDeUsoRegistrarAlquiler
@inject CasoDeUsoPagarEfectivo casoDeUsoPagarEfectivo
@inject CasoDeUsoRegistrarEntregaPresencial casoDeUsoRegistrarEntrega

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="card">
    <h3 class="card-title">Registrar Alquiler Presencial</h3>

    <div class="mb-2">
        <label>Correo del Cliente</label>
        <input @bind="correoCliente" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Fecha de Inicio</label>
        <InputDate @bind-Value="fechaInicio" class="form-control" />
    </div>

    <div class="mb-2">
        <label>Fecha de Fin</label>
        <InputDate @bind-Value="fechaFin" class="form-control" />
    </div>

    <div class="mb-2">
        <label>NÃºmero de Personal</label>
        <InputNumber @bind-Value="numeroPersonal" class="form-control" />
    </div>

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="RegistrarPagoEfectivo">
            Pagar en Efectivo
        </button>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; } // Recibe el ID del inmueble desde la URL

    private string correoCliente = "";
    private DateTime fechaInicio = DateTime.Today;
    private DateTime fechaFin = DateTime.Today.AddDays(1);
    private int numeroPersonal;
    private string ErrorMessage = "";


    private decimal calcularPrecio(DateTime fechaInicio, DateTime fechaFin, decimal? monto)
    {
        if (monto == null)
            throw new ArgumentException("El monto debe tener valor");
        int cantidadDias = (fechaFin - fechaInicio).Days;
        decimal precioTotal = (cantidadDias - 1) * monto.Value;
        return precioTotal;
    }

    private async Task RegistrarPagoEfectivo()
    {
        try
        {
            casoDeUsoRegistrarAlquiler.Ejecutar(correoCliente, Id, fechaInicio, fechaFin, numeroPersonal);
            Alquileres_ExpressContext _context = new Alquileres_ExpressContext();
            Inmueble inmueble = _context.Inmuebles.FirstOrDefault(i => i.Id == Id);
            decimal precio = calcularPrecio(fechaInicio, fechaFin, inmueble.Precio);
            Personal personal = _context.Personal.FirstOrDefault(p => p.Id == numeroPersonal);
            Cliente cliente = _context.Clientes.FirstOrDefault(c => c.Correo == correoCliente);
            if (personal == null)
            {
                throw new Exception("Personal no encontrado.");
            }
            if(cliente == null)
            {
                throw new Exception("Cliente no encontrado.");
            }
            Alquiler alquiler = new Alquiler(correoCliente, fechaInicio, fechaFin, precio, Id, personal.Nombre, personal.Apellido);
            //RegistroDeLlave registro = casoDeUsoRegistrarEntrega.Ejecutar(alquiler.Id, personal.Id, cliente.Id);
            //alquiler.Entrega = registro;

            // Llama al caso de uso para registrar el pago en efectivo
            casoDeUsoPagarEfectivo.PagarEfectivo(alquiler);
            ErrorMessage = "Alquiler registrado exitosamente pagando en efectivo.";
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}

