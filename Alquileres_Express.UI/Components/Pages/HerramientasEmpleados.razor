@page "/Herramientas"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoAlquiler
@inject CasoDeUsoObtenerCantidadDeClientesEntreFechas CasoDeUsoObtenerCantidadDeClientesEntreFechas
@inject CasoDeUsoObtenerValorDeAlquileresEntreFechas CasoDeUsoObtenerValorDeAlquileresEntreFechas

@attribute [Authorize(Roles = "Administrador,Gerente,Empleado")] 

    <div class="decorative-elements">
        <div class="circle"></div>
        <div class="circle"></div>
        <div class="circle"></div>
    </div>

    <div class="container">
        <h1 class="title">Operaciones Disponibles</h1>
        <div class="buttons-grid">
     <!-- 
            <button class="operation-btn entrega" onclick="registrarEntrega()">                                     
                <span class="btn-icon">üîë</span>
                Registrar Entrega de Llaves
            </button>
         
            <button class="operation-btn devolucion" onclick="registrarDevolucion()">
                <span class="btn-icon">üîÑ</span>
                Registrar Devoluci√≥n de Llaves
            </button>  -->
            <a class="operation-btn cliente" href="/registrar-cliente-presencial">
                <span class="btn-icon">üë∑‚Äç‚ôÇÔ∏è</span>
                Agregar cliente
            </a> 

            <AuthorizeView Roles="Gerente, Administrador">
                <Authorized>
                    <a class="operation-btn empleado" href="/agregar-personal">
                        <span class="btn-icon">üë∑‚Äç‚ôÇÔ∏è</span>
                        Agregar empleado
                    </a>  

                 <a class="operation-btn historial" href = "/cargar-inmueble">
                    <span class="btn-icon">üìã</span>
                    Cargar inmueble
                </a>

                <button class="operation-btn ingresos" @onclick="MostrarIngresos">
                    <span class="btn-icon">üìà</span>
                        Ingresos totales
                    </button>

                <button class="operation-btn clientes" @onclick="MostrarClientes">
                    <span class="btn-icon">üîÑ</span>
                        Nuevos clientes
                </button>
                </Authorized>  
            </AuthorizeView>
<!-- 
            <button class="operation-btn historial" onclick="verHistorial()">
                <span class="btn-icon">üìã</span>
                Ver Historial de Llaves
            </button>

            
                                                                                -->     <!--                 LOS METODOS COMENTADOS SON PARA LA 2DA EMT O NO LOS TENEMOS IMPLEMENTADOS TODAVIA       -->
            <a class="operation-btn listar" href = "/listadoUsuario">
                  <span class="btn-icon">üë•</span>
                Listar usuarios
            </a>

            <a class="operation-btn historial" href = "/InmueblesNoDisponibles">
                    <span class="btn-icon">üîë</span>
                    Inmuebles no disponibles
                </a>
        </div>
    </div>

   @if(mostrarTarjeta){
    <div class="mini-container">
        <h4>üìå Elija una fecha inicial y una fecha limite</h4>
        <div class="date-picker-section">
            <div class="date-picker-container">
                <div class="date-fields">
                    <div class="date-field">
                        <label>fecha inicio</label>
                    <div class="date-value">@(StartDate?.ToString("dd/M/yyyy") ?? "Seleccionar")
                </div>
            </div>
            <div class="date-separator"></div>
                <div class="date-field">
                    <label>fecha limite</label>
                    <div class="date-value">@(EndDate?.ToString("dd/M/yyyy") ?? "Seleccionar")</div>
                </div>
            </div>
                <DateRangePicker StartDatePlaceholder="CHECK-IN" EndDatePlaceholder="CHECK-OUT"
                @bind-StartDate="StartDate" @bind-EndDate="EndDate"
                DaysEnabledFunction="(d) => true" class="hidden-picker"
                placeholder="Select dates..." OnRangeSelect="VerificarFechas" />
            </div>
                @if (!string.IsNullOrEmpty(mensajeError)){
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                            @mensajeError
                    </div>
                }
        </div>
       @if (esParaClientes && StartDate != null && EndDate != null)
        {
            <div class="price-breakdown">
                <div class="breakdown-total">
                    <span>Clientes que se registraron en esas fechas: @cantidadClientes().ToString()</span>
                </div>
            </div>
        }
        else if (esParaInmuebles && StartDate != null && EndDate != null)
        {
            <div class="price-breakdown">
                <div class="breakdown-total">
                    <span>Total $@totalAlquileres().ToString()</span>
                </div>
            </div>
        }
    }

    <script>
        // Funciones para cada operaci√≥n
        function registrarEntrega() {
            // L√≥gica para registrar entrega de llaves
            alert('Funci√≥n: Registrar Entrega de Llaves');
            console.log('Ejecutando: Registrar Entrega de Llaves');
        }

        function registrarDevolucion() {
            // L√≥gica para registrar devoluci√≥n de llaves
            alert('Funci√≥n: Registrar Devoluci√≥n de Llaves');
            console.log('Ejecutando: Registrar Devoluci√≥n de Llaves');
        }

        function registrarEmpleado() {
            // L√≥gica para registrar empleado
            alert('Funci√≥n: Registrar Empleado');
            console.log('Ejecutando: Registrar Empleado');
        }

        function verHistorial() {
            // L√≥gica para ver historial de llaves
            alert('Funci√≥n: Ver Historial de Llaves');
            console.log('Ejecutando: Ver Historial de Llaves');
        }

        function listarUsuarios() {
            // L√≥gica para listar usuarios
            alert('Funci√≥n: Listar Usuarios');
            console.log('Ejecutando: Listar Usuarios');
        }

        // Efecto de entrada para los botones
        document.addEventListener('DOMContentLoaded', function() {
            const buttons = document.querySelectorAll('.operation-btn');
            buttons.forEach((button, index) => {
    using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoAlquiler;
#line default
#line hidden
#nullable restore
#line (8, 12) - (8, 65) "C:\Users\Mar\Desktop\Alquileres_Express\Alquileres_Express.UI\Components\Pages\HerramientasEmpleados.razor"
        </script>
</div>
    @code {
        
    private bool mostrarTarjeta { get; set; } = false;   // Cambi√° esto a false para ocultarla
    private bool esParaInmuebles { get; set; } = false;
    private bool esParaClientes { get; set; } = false;


       void MostrarIngresos() {
            if(!esParaInmuebles){
                esParaClientes = false;
                esParaInmuebles = true;
                mostrarTarjeta = true;
                StateHasChanged();
            }
            else{
                esParaInmuebles = false;
                mostrarTarjeta = false;
                StateHasChanged();
            }
        }

        void MostrarClientes(){
            if(!esParaClientes ){
                esParaInmuebles = false;
                esParaClientes = true;
                mostrarTarjeta = true;
                StateHasChanged();
            }
            else{
                esParaInmuebles = false;
                mostrarTarjeta = false;
                StateHasChanged();
            }
        }

   

    private string mensajeError = string.Empty;

    DateTimeOffset? StartDate { get; set; } 
    DateTimeOffset? EndDate { get; set; } 

     private decimal totalAlquileres(){
        decimal total = 0;
        DateTime fecha1 = StartDate?.UtcDateTime ?? DateTime.MinValue;
        DateTime fecha2 = EndDate?.UtcDateTime ?? DateTime.MinValue;
        total = CasoDeUsoObtenerValorDeAlquileresEntreFechas.Ejecutar(fecha1, fecha2);
        return total;
    }

     private int cantidadClientes(){
        int num = 0;
        DateTime fecha1 = StartDate?.UtcDateTime ?? DateTime.MinValue;
        DateTime fecha2 = EndDate?.UtcDateTime ?? DateTime.MinValue;
        num = CasoDeUsoObtenerCantidadDeClientesEntreFechas.Ejecutar(fecha1, fecha2);
        return num;
     }

      private void VerificarFechas()
    {
        if (StartDate == null || EndDate == null)
        {
            mensajeError = "Debe seleccionar un rango de fechas.";
            return;
        }
        if (StartDate.Value.Date == EndDate.Value.Date)
        {
            mensajeError = "Debe elegir por lo menos una noche.";
            return;
        }
        mensajeError = string.Empty;
    }
}
}

<style>
    .property-rating i {
        font-size: 1rem;
    }

    .property-rating .text-secondary {
        font-size: 0.9rem;
    }

    .promedio-numero {
        font-size: 1.25rem;
        /* o prob√° con 1.3rem si quer√©s m√°s presencia */
        font-weight: 600;
        color: #343a40;
        /* o el color que combine con tu est√©tica */
    }

    .hidden-picker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>