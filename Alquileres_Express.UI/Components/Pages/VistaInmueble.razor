@page "/inmueble/{id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoObtenerInmueble casoDeUsoObtenerInmueble
@inject IRepositorioFoto repositorioFotos
@inject IJSRuntime JS
@inject MercadoPagoService MPService
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
<div class="container">
    <h1>@inmueble.Nombre</h1>
    <p class="text-muted">@inmueble.Direccion - @inmueble.Ciudad</p>

    <div class="row">
        <div class="col-md-7">
            @if (imagenes.Length > 0)
            {
                <section class="galeria">
                    <button @onclick="FotoAnterior" class="btn-flecha">◀</button>
                    <img src="@imagenes[fotoActual]" alt="Foto propiedad" class="foto" />
                    <button @onclick="FotoSiguiente" class="btn-flecha">▶</button>
                </section>
            }
            else
            {
                <p><em>Sin imágenes disponibles</em></p>
            }
        </div>

        <div class="col-md-5">
            <div class="card p-3 shadow-sm">
                <h2 class="text-success">$@inmueble.Precio.ToString()</h2>
                <p><strong>Camas:</strong> @inmueble.CantidadDeCamas</p>
                <p><strong>Baños:</strong> @inmueble.Banios</p>
                <DateRangePicker @bind-StartDate="StartDate" @bind-EndDate="EndDate" DaysEnabledFunction="eshabil"
                    class="form-control form-control-sm" placeholder="Select dates..."
                    OnRangeSelect="VerificarFechas" />
                @if (!string.IsNullOrEmpty(mensajeError))
                {
                    <div class="text-danger">@mensajeError</div>
                }

                @if (!podesPagar)
                {
                    <button class="btn btn-primary mt-3" disabled>Reservar</button>
                }
                else
                {
                    <div class="text-success">Precio total: $@calcularPrecio().ToString("F2")</div>
                    <button class="btn btn-primary mt-3" @onclick="IniciarCompra">Reservar</button>

                }
            </div>
        </div>
    </div>

    <div class="mt-5">
        <h4>Ubicación</h4>
        <iframe width="100%" height="300" frameborder="0" style="border:0"
            src="https://www.google.com/maps?q=@inmueble.CoordLat,@inmueble.CoordLong&hl=es;z=14&output=embed"
            allowfullscreen>
        </iframe>
    </div>
</div>
@code {
    [Parameter]
    public int Id { get; set; }
    DateTimeOffset? StartDate { get; set; } = DateTime.Today;
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);
    private Inmueble inmueble;
    private bool podesPagar { get; set; } = false;
    private string mensajeError = string.Empty;
    private int fotoActual = 0;
    private string[] imagenes { get; set; } = new string[0];

    void FotoSiguiente()
    {
        fotoActual = (fotoActual + 1) % imagenes.Length;
        StateHasChanged(); // Actualiza la vista para mostrar la nueva foto
    }

    void FotoAnterior()
    {
        fotoActual = (fotoActual - 1 + imagenes.Length) % imagenes.Length;
        StateHasChanged();
    }



    protected override void OnParametersSet()
    {
        try
        {
            inmueble = casoDeUsoObtenerInmueble.Ejecutar(Id);
            imagenes = repositorioFotos.ObtenerFotosPorInmueble(Id).Select(f => f.Url).ToArray();

        }
        catch (Exception ex)
        {
            // Manejo de errores, por ejemplo, redirigir a una página de error o mostrar un mensaje
            NavigationManager.NavigateTo("/");
        }
    }
    private async Task IniciarCompra()
    {
        double precio = calcularPrecio();
        Alquiler alquiler = new Alquiler
        {
            FechaInicio = StartDate.Value.Date,
            FechaFin = EndDate.Value.Date,
            Precio = calcularPrecio(),

        };
        var url = await MPService.CrearPreferenciaAsync(inmueble.Nombre, );

        NavigationManager.NavigateTo(url, forceLoad: true); // redirige al checkout de MP
    }
    private List<DateTime> FechasReservadas { get; set; } = new List<DateTime>
{
new DateTime(2025, 6, 6),
new DateTime(2025, 6, 5),
new DateTime(2025, 6, 4)
};
    private bool eshabil(DateTimeOffset date)
    {
        return !FechasReservadas.Contains(date.Date);
    }

    private void VerificarFechas()
    {

        for (DateTime date = StartDate.Value.Date; date <= EndDate.Value.Date; date = date.AddDays(1))
        {
            if (!eshabil(date))
            {
                mensajeError = $"La fecha {date.ToShortDateString()} ya está reservada.";
                podesPagar = false;
                Console.WriteLine("hola");
                return;
            }
        }
        mensajeError = string.Empty;
        podesPagar = true;


    }

    private double calcularPrecio()
    {
        if (StartDate.HasValue && EndDate.HasValue)
        {
            var dias = (EndDate.Value - StartDate.Value).TotalDays;
            return dias * inmueble.Precio;
        }
        return 0.0;
    }
}