@page "/inmueble/{id:int}"
@rendermode InteractiveServer
@inject CasoDeUsoObtenerInmueble casoDeUsoObtenerInmueble
@inject IRepositorioFoto repositorioFotos
@inject IJSRuntime JS
@inject MercadoPagoService MPService
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
@inject ServicioVerificarPago _servicioVerificarPago

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="property-page">
    <!-- Hero Section -->
    <div class="hero-section">
        <div class="hero-overlay"></div>

        <!-- Gallery Section -->
        <div class="gallery-container">
            @if (imagenes.Length > 0)
            {
                <div class="main-gallery">
                    <div class="gallery-navigation">
                        <button @onclick="FotoAnterior" class="nav-btn prev-btn">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        <button @onclick="FotoSiguiente" class="nav-btn next-btn">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>

                    <div class="image-container">
                        <img src="@imagenes[fotoActual]" alt="@inmueble.Nombre" class="main-image" />
                        <div class="image-indicator">
                            <span>@(fotoActual + 1) / @imagenes.Length</span>
                        </div>
                    </div>

                    <!-- Thumbnails -->
                    <div class="thumbnails">
                        @for (int i = 0; i < Math.Min(imagenes.Length, 4); i++)
                        {
                            int index = i;
                            <div class="thumbnail @(fotoActual == index ? "active" : "")" @onclick="() => CambiarFoto(index)">
                                <img src="@imagenes[index]" alt="Foto @(index + 1)" />
                            </div>
                        }
                        @if (imagenes.Length > 4)
                        {
                            <div class="thumbnail more-photos">
                                <span>+@(imagenes.Length - 4)</span>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="no-images">
                    <i class="fas fa-image"></i>
                    <p>Sin imágenes disponibles</p>
                </div>
            }
        </div>

        <!-- Property Header -->
        <div class="property-header">
            <div class="container">
                <div class="header-content">
                    <div class="property-info">
                        <h1 class="property-title">@inmueble.Nombre</h1>
                        <div class="property-location">
                            <i class="fas fa-map-marker-alt"></i>
                            <span>@inmueble.Direccion, @inmueble.Ciudad</span>
                        </div>
                        <div class="property-features">
                            <div class="feature">
                                <i class="fas fa-bed"></i>
                                <span>@inmueble.CantidadDeCamas Camas</span>
                            </div>
                            <div class="feature">
                                <i class="fas fa-bath"></i>
                                <span>@inmueble.Banios Baños</span>
                            </div>
                            <div class="feature">
                                <i class="fas fa-home"></i>
                                <span>@inmueble.TipoInmueble</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container">
            <div class="content-grid">
                <!-- Property Details -->
                <div class="property-details">
                    <div class="details-card">
                        <h3>Sobre esta propiedad</h3>
                        <div class="amenities-grid">
                            <div class="amenity">

                                <p>Espacio seguro para tu vehículo</p>
                            </div>
                        </div>
                    </div>

                    <!-- Map Section -->
                    <div class="map-section">
                        <h3>Ubicación</h3>
                        <div class="map-container">
                            <iframe width="100%" height="300" frameborder="0" style="border:0"
                                src="https://www.google.com/maps?q=@inmueble.CoordLat,@inmueble.CoordLong&hl=es;z=14&output=embed"
                                allowfullscreen>
                            </iframe>
                        </div>
                    </div>
                </div>

                <!-- Booking Card -->
                <div class="booking-sidebar">
                    <div class="booking-card">
                        <div class="price-section">
                            <div class="price">
                                <span class="currency">$</span>
                                <span class="amount">@inmueble.Precio</span>
                                <span class="period">/ noche</span>
                            </div>

                        </div>

                        <div class="date-picker-section">
                            <div class="date-picker-container">
                                <div class="date-fields">
                                    <div class="date-field">
                                        <label>CHECK-IN</label>
                                        <div class="date-value">@(StartDate?.ToString("dd/M/yyyy") ?? "Seleccionar")
                                        </div>
                                    </div>
                                    <div class="date-separator"></div>
                                    <div class="date-field">
                                        <label>CHECK-OUT</label>
                                        <div class="date-value">@(EndDate?.ToString("dd/M/yyyy") ?? "Seleccionar")</div>
                                    </div>
                                </div>
                                <DateRangePicker StartDatePlaceholder="CHECK-IN" EndDatePlaceholder="CHECK-OUT"
                                    @bind-StartDate="StartDate" @bind-EndDate="EndDate"
                                    DaysEnabledFunction="(d) => !NoEsHabil(d)" class="hidden-picker"
                                    placeholder="Select dates..." OnRangeSelect="VerificarFechas" />
                            </div>

                            @if (!string.IsNullOrEmpty(mensajeError))
                            {
                                <div class="error-message">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    @mensajeError
                                </div>
                            }

                            @if (podesPagar && StartDate != null && EndDate != null)
                            {
                                <div class="price-breakdown">

                                    <div class="breakdown-total">
                                        <span>Total</span>
                                        <span>$@calcularPrecio().ToString("N0")</span>
                                    </div>
                                </div>
                            }
                        </div>

                        <AuthorizeView Roles="Gerente">
                            <div class="booking-actions">
                                @if (!podesPagar)
                                {
                                    <button class="reserve-btn disabled" disabled>
                                        <i class="fas fa-calendar-times"></i>
                                        Selecciona fechas disponibles
                                    </button>
                                }
                                else
                                {
                                    <button class="reserve-btn" @onclick="IniciarCompra">
                                        <i class="fas fa-credit-card"></i>
                                        Reservar ahora
                                    </button>
                                }
                                <p class="no-charge-text">No se realizará ningún cargo por ahora</p>
                            </div>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    DateTimeOffset? StartDate { get; set; } = DateTime.Today;
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(1).AddTicks(-1);
    private Inmueble inmueble;
    private bool podesPagar { get; set; } = false;
    private string mensajeError = string.Empty;
    private int fotoActual = 0;
    private string[] imagenes { get; set; } = new string[0];
    String? correo { get; set; }
    String? rol { get; set; }
    private List<RangoDeFechas> FechasReservadas { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            correo = user.Identity.Name;
            rol = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }

    void FotoSiguiente()
    {
        fotoActual = (fotoActual + 1) % imagenes.Length;
        StateHasChanged();
    }

    void FotoAnterior()
    {
        fotoActual = (fotoActual - 1 + imagenes.Length) % imagenes.Length;
        StateHasChanged();
    }

    void CambiarFoto(int index)
    {
        fotoActual = index;
        StateHasChanged();
    }

    protected override void OnParametersSet()
    {
        try
        {
            inmueble = casoDeUsoObtenerInmueble.Ejecutar(Id);
            CrearRangosDeFechaReservados(inmueble.Alquileres);
            imagenes = repositorioFotos.ObtenerFotosPorInmueble(Id).Select(f => f.Url).ToArray();
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task IniciarCompra()
    {
        decimal precio = calcularPrecio();

        Alquiler alquiler = new Alquiler { CorreoCliente = correo, 
        FechaDeInicio = StartDate!.Value.Date, 
        FechaDeFin = EndDate!.Value.Date,
        Precio = precio,
        InmuebleId = inmueble.Id};
        var url = await MPService.CrearPreferenciaAsync(inmueble.Nombre, alquiler);
        NavigationManager.NavigateTo(url, forceLoad: true);
    }

    private void CrearRangosDeFechaReservados(List<Alquiler> alquileres)
    {
        FechasReservadas.Clear();
        alquileres.Where(a => !a.Cancelado &&
        !a.GetEstadoDeAlquiler().Equals(EstadoDeAlquiler.Terminado) && a.Pagado).ToList().ForEach(alquiler =>
        {
            FechasReservadas.Add(new RangoDeFechas(alquiler.FechaDeInicio, alquiler.FechaDeFin));
        });
    }

    private bool NoEsHabil(DateTimeOffset date)
    {
        return FechasReservadas.Any(rango => rango.Contains(date.Date)) || date.Date < DateTime.Today;
    }

    private void VerificarFechas()
    {
        if (StartDate == null || EndDate == null)
        {
            mensajeError = "Debe seleccionar un rango de fechas.";
            podesPagar = false;
            return;
        }
        for (DateTime date = StartDate.Value.Date; date <= EndDate.Value.Date; date = date.AddDays(1))
        {
            if (NoEsHabil(date))
            {
                mensajeError = $"La fecha {date.ToShortDateString()} ya está reservada.";
                podesPagar = false;
                return;
            }
        }
        mensajeError = string.Empty;
        podesPagar = true;
    }

    private decimal calcularPrecio()
    {
        if (StartDate != null && EndDate != null)
        {
            int dias = (int)(EndDate.Value - StartDate.Value).TotalDays + 1;
            return dias * inmueble.Precio;
        }
        return 0;
    }

}

<style>
    .hotel-booking-picker {
        position: relative;
        border: 1px solid #ddd;
        border-radius: 4px;
        background: white;
        cursor: pointer;
    }

    .booking-fields {
        display: flex;
        align-items: center;
        padding: 12px;
    }

    .booking-field {
        flex: 1;
    }

    .booking-label {
        display: block;
        font-size: 11px;
        font-weight: bold;
        color: #666;
        text-transform: uppercase;
        margin-bottom: 2px;
    }

    .booking-date {
        font-size: 14px;
        color: #333;
        font-weight: 500;
    }

    .booking-separator {
        margin: 0 15px;
        color: #ddd;
        font-size: 18px;
    }

    .hidden-picker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>