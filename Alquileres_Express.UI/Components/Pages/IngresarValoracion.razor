@rendermode InteractiveServer
@inject NavigationManager navegationManager
@inject CasoDeUsoCalificarInmueble casoCalificar
@inject CasoDeUsoBuscarClientePorId casoDeUsoBuscarClientePorId
@using Alquileres_Express.Aplicacion.Entidades

@if (mostrar)
{
  <div class="card shadow p-4 mt-4">
    <h4 class="text-primary mb-3">
      <i class="fas fa-star"></i> Calificar inmueble
    </h4>

    <!-- Estrellas -->
    <ul class="list-unstyled d-flex gap-1 mb-3">
        @for (int i = 1; i <= 5; i++)
        {
            int estrella = i;      @* ⚠️ copia local *@
            <li>
                <i class="fas fa-star fa-2x cursor-pointer
                     @(estrella <= calificacionSeleccionada
                    ? "text-warning"
                    : "text-secondary")"
                    @onclick="() => SeleccionarCalificacion(estrella)">
                </i>
            </li>
        }
    </ul>


    <!-- Comentario -->
    <textarea class="form-control mb-3"
              placeholder="Comentario (opcional)" rows="3"
              @bind="comentario">
    </textarea>

    <!-- Botones -->
    <div class="d-flex gap-2">
      @* <button class="btn btn-review" @onclick="() => EnviarCalificacion()">
        <i class="fas fa-star"></i> Guardar
      </button> *@
      <button class="btn btn-success"
                    @onclick="() => EnviarCalificacion()">
                <i class="fas fa-save"></i> Guardar
            </button>
      <button class="btn btn-outline-secondary" @onclick="Cerrar">
        Cancelar
      </button>
    </div>

    @if (!string.IsNullOrEmpty(mensaje))
    {
      <div class="alert alert-success mt-3">@mensaje</div>
    }
  </div>
}

@code {
  [Parameter] public int AlquilerId { get; set; }
  [Parameter] public int InmuebleId { get; set; }
  [Parameter] public int ClienteId { get; set; }
  [Parameter] public EventCallback OnClose { get; set; }

  bool mostrar = true;
  int calificacionSeleccionada = 0;
  string comentario = "";
  string mensaje = "";
  bool esError = false;
  void SeleccionarCalificacion(int v)
    {
        calificacionSeleccionada = v;
        StateHasChanged();  // fuerza re-render, aunque normalmente no haría falta
    }


    async Task EnviarCalificacion()
    {
      if (calificacionSeleccionada < 1)
    {
        mensaje   = "Por favor selecciona una calificación.";
        esError   = true;
        return;
    }

      Cliente? cliente = casoDeUsoBuscarClientePorId.Ejecutar(ClienteId);
      
      var modelo = new Valoracion
      {
          InmuebleId       = InmuebleId,
          ClienteId        = ClienteId,
          Calificacion     = calificacionSeleccionada,
          Comentario       = comentario,
          NombreCliente = cliente!.Nombre,
          ApellidoCliente = cliente!.Apellido
      };
      
    

    bool ok = casoCalificar.Ejecutar(InmuebleId, ClienteId, modelo);

    if (ok)
    {
        mensaje = "¡Gracias! Tu reseña fue guardada.";
        esError = false;
        await Task.Delay(3000);
        await Cerrar();
        navegationManager.NavigateTo($"/alquileres/{ClienteId}", true);
        await OnClose.InvokeAsync(null);
    }
    else
    {
        mensaje = "Error: no se pudo guardar la calificación.";
        esError = true;
    }

  }

    async Task Cerrar()
{
    mostrar = false;  
    await OnClose.InvokeAsync(null);
}
}