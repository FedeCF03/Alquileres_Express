@page "/alquileres/{Id:int}"
@attribute [Authorize]

@using Alquileres_Express.Aplicacion.CasosDeUso.CasosDeUsoAlquiler
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject CasoDeUsoObtenerAlquileresPorCorreo casoDeUsoObtenerAlquileresPorCorreo
@inject CasoDeUsoObtenerTodosLosAlquileres casoDeUsoObtenerTodosLosAlquileres
@inject CasoDeUsoListarInmuebles casoDeUsoListarInmuebles
@inject CasoDeUsoAlquilerCancelarAlquiler casoDeUsoAlquilerCancelarAlquiler
@inject CasoDeUsoAlquilerGetEstadoDeAlquiler casoDeUsoAlquilerGetEstadoDeAlquiler
@inject CasoDeUsoObtenerAlquilerPorId casoDeUsoObtenerAlquilerPorId
@inject CasoDeUsoBuscarClientePorId casoDeUsoBuscarClientePorId
@inject CasoDeUsoAñadirLlave casoDeUsoAlquilerAñadirLlave
@inject CasoDeUsoBuscarPersonalPorCorreo CasoDeUsoBuscarPersonalPorCorreo
@inject CasoDeUsoCalificarInmueble casoDeUsoCalificarInmueble

@rendermode InteractiveServer

@if (!string.IsNullOrEmpty(mensajeLlave))
{
    <div class="alert alert-success text-center mt-3" role="alert">
        @mensajeLlave
    </div>
}

<AuthorizeView Roles="Cliente">
<Authorized>
    <div class="page-header">
        <h1><i class="fas fa-home"></i> Mis Alquileres</h1>
        <p>Gestiona tus reservas de manera fácil y rápida</p>
    </div>
</Authorized>
<NotAuthorized>
    
    <div class="page-header">
        @if (id != 0)
        {
            <h1><i class="fas fa-home"></i> Alquileres de @cliente?.Nombre</h1>
            <p>Gestiona los alquileres del cliente de manera fácil y rápida</p>
        }
        else
        {
            <h1><i class="fas fa-home"></i> Alquileres</h1>
            <p>Gestiona los alquileres de todos los clientes</p>
        }
        
    </div>
</NotAuthorized>
</AuthorizeView>

<div class="rental-grid">
    @if (alquileres != null && alquileres.Count > 0)
    {
        @foreach (var alquiler in alquileres)
        {
            var inmueble = GetInmuebleById(alquiler.InmuebleId);
            @if (inmueble != null)
            {
                <div class="rental-card">
                    <div class="rental-image">
                        <NavLink href="@($"/inmueble/{alquiler.InmuebleId}")">
                            <img src="@getImagenInmueble(alquiler.InmuebleId)" alt="@inmueble.Nombre" href />
                        </NavLink>
                        <div class="price-badge">
            @if (alquiler.Precio > 0)
            {
                <i class="fas fa-dollar-sign"></i> @alquiler.Precio.ToString("N0")
            }
            else
            {
                <span style="color: red;">Sin precio</span>
            }
            
        </div>
        
                    </div>
                    <div class="rental-content">
                        <div class="rental-header">
                            <h3>@inmueble.Nombre</h3>
                        </div>
                        <div class="rental-details">
                            <div class="detail-item">
                                <i class="fas fa-map-marker-alt detail-icon"></i>
                                <span class="detail-label">Dirección:</span>
                                <span class="detail-value">@inmueble.Direccion</span>
                            </div>

                            <div class="detail-item">
                                <i class="fas fa-calendar-check detail-icon"></i>
                                <span class="detail-label">Check-in:</span>
                                <span class="detail-value">@alquiler.FechaDeInicio.ToString("dd/MM/yyyy")</span>
                            </div>

                            <div class="detail-item">
                                <i class="fas fa-calendar-times detail-icon"></i>
                                <span class="detail-label">Check-out:</span>
                                <span class="detail-value">@alquiler.FechaDeFin.ToString("dd/MM/yyyy")</span>
                            </div>

                            <div class="detail-item">
                                <i class="fas fa-clock detail-icon"></i>
                                <span class="detail-label">Duración:</span>
                                <span class="detail-value duration-highlight">@((alquiler.FechaDeFin - alquiler.FechaDeInicio).Days)
                                    Noches</span>
                            </div>
                        </div> 
                        <div class="rental-actions">
                         <AuthorizeView Roles="Administrador, Gerente, Empleado">
                            @if ( alquiler.RegistrosDeLlave == null || alquiler.RegistrosDeLlave.Count == 0)
                            {
                                <button class= "btn btn-danger" type = "button" @onclick="() => AñadirLlave(alquiler.Id, alquiler.ClienteId, true)" >
                                    <i class= "fas fa-times" > </i> Registrar entrega 
                                </button>
                                
                            } 
                            else 
                            {
                                <a class="btn btn-primary btn-sm shadow-sm d-flex align-items-center gap-2" 
                                    href="@($"/ListarLlaves/{alquiler.Id}")">
                                    <i class="fas fa-list"></i> Historial de llaves
                                </a>                                
                                if(alquiler.RegistrosDeLlave.Count == 2)
                                {
                                    <p><i class= "fas fa-check" > </i> Entrega y devolución registrada</p>
                                }
                                else
                                {
                                    <button class= "btn btn-danger" type = "button" @onclick="() => AñadirLlave(alquiler.Id, alquiler.ClienteId, false)" >
                                            <i class= "fas fa-times" > </i> Registrar devolucion 
                                    </button >
                                }
                                    
                            }
                            </AuthorizeView>
                            @if (!alquiler.Cancelado)
                            {
                                EstadoDeAlquiler estado = casoDeUsoAlquilerGetEstadoDeAlquiler.Ejecutar(alquiler.Id);
                                
                            @if (estado == EstadoDeAlquiler.Vigente)
                            {   <button class="btn btn-danger" type="button" @onclick=" () => CancelarReserva(alquiler.Id)" >
                                    <i class="fas fa-times"></i> Cancelar
                                </button>
                            }
                            
                                @if (estado == EstadoDeAlquiler.Terminado)
                                {
                                    <AuthorizeView Roles="Cliente">
                                        <Authorized>
                                            <button class="btn btn-review" @onclick="() => MostrarCalificacion(alquiler.Id, alquiler.InmuebleId)">
                                                <i class="fas fa-star"></i> Calificar
                                            </button> 
                                            @if (mostrarFormularioCalificacion)
                                            {
                                                <div class="card shadow p-4 mt-4">
                                                    <h4 class="text-primary mb-3">
                                                    <i class="fas fa-star"></i> Calificar inmueble
                                                    </h4>                           
                                                    <!-- Estrellas 1-5 -->
                                                    <ul class="list-unstyled d-flex gap-1 mb-3">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        int estrella = i;                     <!-- ⚠️ copia local -->
                                                        <li>
                                                            <i class="fas fa-star fa-2x cursor-pointer
                                                                @(estrella <= calificacionSeleccionada
                                                                   ? "text-warning"
                                                                   : "text-secondary")"
                                                               @onclick="@(() => SeleccionarCalificacion(estrella))">
                                                            </i>
                                                        </li>
                                                    }
                                                    </ul>       


                                                    <!-- Comentario -->
                                                    <textarea class="form-control mb-3"
                                                        placeholder="Comentario (opcional)" rows="3"
                                                        @bind="comentario">
                                                    </textarea>

                                                    <!-- Botones -->
                                                    <div class="d-flex gap-2">
                                                        <button class="btn btn-review" @onclick="() => EnviarCalificacion()">
                                                            <i class="fas fa-star"></i> Guardar
                                                        </button>
                                                        <button class="btn btn-outline-secondary"
                                                                @onclick="() => mostrarFormularioCalificacion = false">
                                                            Cancelar
                                                        </button>
                                                    </div>

                                                    @if (!string.IsNullOrEmpty(mensajeCalificacion))
                                                    {
                                                        <div class="alert alert-success mt-3">@mensajeCalificacion</div>
                                                    }
                                                </div>
                                                <div class="card shadow p-4 mt-4 mx-auto" style="max-width: 600px;"></div>
                                            }   


                                            <button class="btn btn-review" @onclick="() => DejarResena(alquiler.InmuebleId)">
                                                <i class="fas fa-star"></i> Dejar Reseña
                                            </button> 
                                            
                                        </Authorized>
                                    </AuthorizeView>
                                    <span class="status-label terminado">
                                        <i class="fas fa-check"></i> Terminado
                                    </span>
                                }
                                else if (estado == EstadoDeAlquiler.EnProceso)
                                {
                                    <span class="status-label en-proceso">
                                        <i class="fas fa-spinner"></i> En Proceso
                                    </span>
                                }
                             
                            }
                            else
                            {
                                <span class="status-label" style="background: #e74c3c; color: white;">
                                    <i class="fas fa-ban"></i> Cancelado
                                </span>
                                    <button class="btn btn-review" @onclick="() => DejarResena(alquiler.InmuebleId)">
                    <i class="fas fa-star"> Dejar Reseña</i>
                                    </button> 
                            }
                        </div>
                    </div>
                </div>
            }
        }
    }
    else
    {
        <div class="no-rentals">
            <div class="no-rentals-icon">
                <i class="fas fa-home" style="font-size: 4rem; opacity: 0.7; margin-bottom: 1rem;"></i>
            </div>
            <h3>No tienes alquileres</h3>
            <p>Aún no has realizado ninguna reserva.</p>
        </div>
    }
</div> 

        <div class="alert alert-success mt-3 text-center" role="alert"
            style="display: @(string.IsNullOrEmpty(mensajeLlave) ? "none" : "block")">
            @mensajeLlave
        </div>
@code {
    private string correo = "";
    private string rol = "";
    private List<Alquiler>? alquileres = new ();
    private List<Inmueble> inmuebles = new();
    private string mensajeLlave = string.Empty;


    [Parameter]
    public int id { get; set; } = 0;
    Cliente? cliente;
    Personal? personal;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity!.IsAuthenticated)
        {
            correo = user.Identity.Name!;
            rol = user.FindFirst(ClaimTypes.Role)?.Value!;
            cliente = casoDeUsoBuscarClientePorId.Ejecutar(id);
            if (cliente == null)
            {
                NavigationManager.NavigateTo("/?mensaje=Cliente no encontrado&EsMensajeError=true");
                return; 
            }
            if (rol == "Cliente" && cliente.Correo != correo)
            {
                
                                NavigationManager.NavigateTo("/?mensaje=No tenes permisos papi&EsMensajeError=true");
            }
            if (rol == "Administrador" || rol == "Gerente" || rol == "Empleado")
            {
                personal = CasoDeUsoBuscarPersonalPorCorreo.Ejecutar(correo);
            }
            alquileres = cliente.Alquileres;

            if (alquileres != null && alquileres.Count > 0)
            {
                getInmuebles();
            }
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private void getInmuebles()
    {
        try
        {
            inmuebles = casoDeUsoListarInmuebles.ListarDisponibles();
            inmuebles = inmuebles.FindAll(i => alquileres.Any(a => a.InmuebleId == i.Id));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener los inmuebles: {ex.Message}");
        }
    }

    private string getImagenInmueble(int inmuebleId)
    {
        var inmueble = inmuebles.FirstOrDefault(i => i.Id == inmuebleId);

        // Verificar que el inmueble existe y tiene fotos
        if (inmueble?.Fotos != null && inmueble.Fotos.Count > 0)
        {
            return inmueble.Fotos[0].Url;
        }

        // Retornar imagen por defecto si no hay foto
        return "https://images.unsplash.com/photo-1564013799919-ab600027ffc6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80";
    }

    private Inmueble GetInmuebleById(int inmuebleId)
    {
        return inmuebles.FirstOrDefault(i => i.Id == inmuebleId);
    }

    private void CancelarReserva(int Alquilerid)
    {
        casoDeUsoAlquilerCancelarAlquiler.Ejecutar(Alquilerid);
        NavigationManager.NavigateTo($"/alquileres/{id}", true);    

    }

    private void DejarResena( int id)
    {
        NavigationManager.NavigateTo($"/inmueble/{id}");
    }

    public async Task AñadirLlave(int alquilerId,  int clienteId, bool esEntrega )
    {
        RegistroDeLlave registroDeLlave = new(alquilerId, personal.Id, clienteId,esEntrega);

        casoDeUsoAlquilerAñadirLlave.Ejecutar(registroDeLlave);
        mensajeLlave = esEntrega
        ? "✔️ Entrega registrada correctamente."
        : "🔄 Devolución registrada correctamente.";
        // Esperá 4 segundos y luego ocultá el mensaje
        await Task.Delay(1500);

        NavigationManager.NavigateTo($"/alquileres/{id}", true);
    }
    /* ---------- variables ---------- */
    bool   mostrarFormularioCalificacion = false;
    int    idInmuebleAReseñar            = 0;
    int    calificacionSeleccionada      = 5;
    string comentario                    = "";
    string mensajeCalificacion           = "";
    private int alquilerSeleccionadoId = 0;  

    /* ---------- abre el form ---------- */
    void MostrarCalificacion(int idAlquiler, int idInmueble)
    {
        alquilerSeleccionadoId    = idAlquiler;
        idInmuebleAReseñar       = idInmueble;
        calificacionSeleccionada = 0;   // ← arranca sin ninguna estrella
        comentario               = "";
        mensajeCalificacion      = "";
        mostrarFormularioCalificacion = true;
    }

void SeleccionarCalificacion(int valor)
{
    calificacionSeleccionada = valor;
    StateHasChanged();              // ← forzá el refresco inmediato
}


    /* ---------- guarda la reseña ---------- */

    async Task EnviarCalificacion()
    {
        if (calificacionSeleccionada < 1 || calificacionSeleccionada > 5)
            return; // validación rápida
        cliente = casoDeUsoBuscarClientePorId.Ejecutar(id);
        if (cliente == null)
        {
            mensajeCalificacion = "Error: Cliente no encontrado.";
            return;
        }
        var valoracion = new Valoracion
        {
            InmuebleId      = idInmuebleAReseñar,
            ClienteId       = id,
            Calificacion    = calificacionSeleccionada,
            Comentario      = comentario,
            NombreCliente   = cliente.Nombre,
            ApellidoCliente = cliente.Apellido
        };

        // caso de uso
        bool cumple = casoDeUsoCalificarInmueble.Ejecutar(valoracion.InmuebleId, cliente.Id, valoracion);
        if (!cumple)
        {
            mensajeCalificacion = "Error: No se pudo guardar la calificación.";
            return;
        }
        mensajeCalificacion = "¡Gracias! Tu reseña fue guardada.";
        await Task.Delay(1500).ContinueWith(_ => {
            mostrarFormularioCalificacion = false;  // ocultar form
        });
        StateHasChanged();             
    }

    
}