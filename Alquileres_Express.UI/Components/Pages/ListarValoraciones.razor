@rendermode InteractiveServer
@inject CasoDeUsoListarValoraciones casoDeUsoListarValoraciones
@inject CasoDeUsoBuscarClientePorCorreo CasoDeUsoBuscarClientePorCorreo
@inject CasoDeUsoEditarValoracion casoDeUsoEditarValoracion
@inject CasoDeUsoEliminarValoracion casoDeUsoEliminarValoracion
@inject AuthenticationStateProvider AuthStateProvider

@if (valoraciones == null || !valoraciones.Any())
{
    <p class="sin-valoraciones mt-4 text-muted">
        <i class="fas fa-comment-dots"></i>
        Este inmueble aún no tiene valoraciones.
    </p>
}
else
{
    <div class="valoraciones-container mt-4">
        @foreach (var v in valoraciones)
        {
            <div class="valoracion-card card mb-3 shadow-sm p-3">
    <!-- Encabezado: Nombre a la izquierda, fecha a la derecha -->
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="autor text-primary fw-semibold">
            <i class="fas fa-user me-1"></i> @v.NombreCliente @v.ApellidoCliente
        </div>
        <div class="text-muted small">
            @v.FechaCreacion.ToString("dd/MM/yyyy HH:mm")
        </div>
    </div>

    <!-- Estrellas -->
    <div class="mb-2 estrellas">
        @for (int i = 1; i <= 5; i++)
        {
            <i class="fas fa-star @(i <= v.Calificacion ? "text-warning" : "text-secondary")"></i>
        }
    </div>

    <!-- Comentario -->
    @if (!string.IsNullOrWhiteSpace(v.Comentario))
    {
        <p class="valoracion-texto text-secondary">@v.Comentario</p>
    }

                <!-- Acciones si es del cliente -->
                @if (clienteActual != null && v.ClienteId == clienteActual.Id)
                {
                    <div class="mt-2">
                        <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ComenzarEdicion(v)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-sm btn-outline-danger" @onclick="() => EliminarValoracion(v)">
                            <i class="fas fa-trash-alt"></i> Eliminar
                        </button>
                    </div>
                }
            </div>
        }
    </div>
}

@if (valoracionEditando != null)
{
    <div class="card p-4 mt-3 mx-auto" style="max-width: 600px;">
        <h5 class="mb-3 text-primary">
            <i class="fas fa-pen"></i> Editar valoración
        </h5>

        <div class="d-flex mb-3 gap-1">
            @for (int i = 1; i <= 5; i++)
            {
                int estrella = i;
                <i class="fas fa-star fa-2x cursor-pointer
                       @(estrella <= nuevaCalificacion ? "text-warning" : "text-secondary")"
                   @onclick="@(() => nuevaCalificacion = estrella)">
                </i>
            }
        </div>

        <textarea class="form-control mb-3"
                  @bind="nuevoComentario"
                  placeholder="Escribe tu comentario..."></textarea>

        <div class="d-flex gap-2">
            <button class="btn btn-success"
                    @onclick="GuardarCambiosValoracion">
                <i class="fas fa-save"></i> Guardar
            </button>
            <button class="btn btn-outline-secondary"
                    @onclick="CancelarEdicion">
                Cancelar
            </button>
        </div>
    </div>
}

@code {
    [Parameter]
    public int InmuebleId { get; set; }

    private List<Valoracion> valoraciones = new();
    private Cliente? clienteActual;

    private Valoracion? valoracionEditando;
    private string nuevoComentario = "";
    private int nuevaCalificacion = 0;

    protected override async Task OnParametersSetAsync()
    {
        valoraciones = casoDeUsoListarValoraciones.Ejecutar(InmuebleId);

        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            string correo = user.Identity.Name!;
            clienteActual = CasoDeUsoBuscarClientePorCorreo.Ejecutar(correo);
        }
    }

    void ComenzarEdicion(Valoracion v)
    {
        valoracionEditando = v;
        nuevoComentario = v.Comentario ?? "";
        nuevaCalificacion = v.Calificacion;
    }

    void CancelarEdicion()
    {
        valoracionEditando = null;
        nuevoComentario = "";
        nuevaCalificacion = 0;
    }

    void GuardarCambiosValoracion()
    {
        if (valoracionEditando is not null)
        {
            valoracionEditando.Calificacion = nuevaCalificacion;
            valoracionEditando.Comentario = nuevoComentario;
            casoDeUsoEditarValoracion.Ejecutar(valoracionEditando);

            // Reset UI
            CancelarEdicion();
        }
    }

    private async Task EliminarValoracion(Valoracion valoracion)
    {
        Valoracion? v = valoraciones.FirstOrDefault(v => v.Id == valoracion.Id);
        if (v != null)
        {
            valoraciones.Remove(v);
            await casoDeUsoEliminarValoracion.Ejecutar(v);
        }
    }
}
<style> 
    .valoraciones-container {
        max-width: 700px;
    }

    .valoracion-card {
        border-radius: 6px;
    }

    .valoracion-card .autor {
        font-size: 1rem;
    }

    .valoracion-card .estrellas i {
        margin-left: 2px;
    }

    .cursor-pointer {
        cursor: pointer;
    }
</style>
