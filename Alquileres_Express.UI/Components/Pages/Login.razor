@page "/login"
@inject IHttpContextAccessor HttpContextAccessor
@using System.Security.Claims
@using Alquileres_Express.Aplicacion
@using Alquileres_Express.Aplicacion.Entidades
@using Alquileres_Express.Aplicacion.Interfaces
@using Alquileres_Express.Aplicacion.Servicios
@using Alquileres_Express.Repositorios
@using Alquileres_Express.Aplicacion.CasosDeUso
@using Alquileres_Express.Repositorios.RepositoriosSQLite
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Authentication.Cookies

@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Mail
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="login-card">
        <h3 class="login-title">Iniciar Sesión</h3>

        <EditForm Model="@user" OnValidSubmit="IniciarSesion" FormName="loginForm">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="username">Email</label>
                <InputText id="username" @bind-Value="user.Correo" class="form-control"
                    placeholder="Ingrese su usuario" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" @bind-Value="user.Contraseña" type="password" class="form-control"
                    placeholder="Ingrese su contraseña" />
            </div>
            <div class="login-links">
                <a href="/forgot-password" class="link-secondary">¿Olvidaste tu contraseña?</a>
                <a href="/register" class="link-secondary">Regístrarse</a>
            </div>

            <button type="submit" class="btn-primary">Ingresar</button>
        </EditForm>
        @if (ErrorMessage)
        {
            <div class="alert alert-danger mt-3">
                <strong>Error:</strong> Credenciales incorrectas.
            </div>
        }
    </div>
</div>
@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    private LoginModel user { get; set; } = new();
    private CasoDeUsoBuscarCliente casoDeUsoBuscarCliente = new CasoDeUsoBuscarCliente(new RepositorioCliente());
    private CasoDeUsoBuscarPersonal casoDeUsoBuscarPersonal = new CasoDeUsoBuscarPersonal(new RepositorioPersonal());
    private CasoDeUsoActualizarEstadoDobleAutenticacion casoDeUsoActualizarEstadoDobleAutenticacion = new
    CasoDeUsoActualizarEstadoDobleAutenticacion(new RepositorioPersonal());
    private bool ErrorMessage { get; set; } = false;
    private async Task IniciarSesion()
    {
        Personal personal = casoDeUsoBuscarPersonal.Ejecutar(user.Correo, user.Contraseña);
        if (personal != null)
        {
            user.Rol = personal.Rol;
            if (personal.Rol == RolUsuario.Gerente)
            {
                String codigo = ServicioEnviarEmail.EnviarEmailDobleAutenticacion(personal.Correo);
                casoDeUsoActualizarEstadoDobleAutenticacion.Ejecutar(personal.Id, codigo);
                NavigationManager.NavigateTo("/verificacion-doble-autenticacion");
            }
        }
        else
        {
            Cliente cliente = casoDeUsoBuscarCliente.Ejecutar(user.Correo, user.Contraseña);
            if (cliente != null)
            {
                user.Rol = cliente.Rol;
                await guardarEnCookie();
            }
            else
            {
                ErrorMessage = true;
                throw new Exception("Credenciales incorrectas");
            }
        }

    }

    private async Task guardarEnCookie()
    {

        var claims = new List<Claim> {
new Claim(ClaimTypes.Name, user.Correo),
new Claim(ClaimTypes.Role, user.Rol.ToString())
};
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo("/");
    }
    public class LoginModel
    {
        public string Contraseña { get; set; }
        public RolUsuario Rol { get; set; }
        public string Correo { get; set; }
    }



}