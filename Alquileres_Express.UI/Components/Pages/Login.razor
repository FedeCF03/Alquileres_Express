@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Mail
@inject AuthenticationStateProvider AuthenticationStateProvider

@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject CasoDeUsoBuscarCliente casoDeUsoBuscarCliente
@inject CasoDeUsoBuscarPersonal casoDeUsoBuscarPersonal
@inject CasoDeUsoActualizarEstadoDobleAutenticacion casoDeUsoActualizarEstadoDobleAutenticacion
@inject NavigationManager NavigationManager
@inject ServicioGenerarCodigo servicioGenerarCodigo
@inject ServicioEnviarEmail servicioEnviarEmail
<div class="login-container">
    <div class="login-card">

        <h3 class="login-title">Iniciar sesión</h3>

        <EditForm Model="@user" OnValidSubmit="IniciarSesionComoGerenteFake" FormName="loginForm">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="username">Email</label>
                <InputText id="username" @bind-Value="user.Correo" class="form-control"
                    placeholder="Ingrese su usuario" />
            </div>

            <div class="form-group">
                <label for="password">Contraseña</label>
                <InputText id="password" @bind-Value="user.Contraseña" type="password" class="form-control"
                    placeholder="Ingrese su contraseña" />
            </div>
            <div class="login-links">
                <a href="/forgot-password" class="link-secondary">¿Olvidaste tu contraseña?</a>
            </div>
            <button type="submit" class="btn-primary">Ingresar</button>

        </EditForm>



        @foreach (var error in errores)
        {
            <div class="alert alert-danger mt-2">@error</div>
        }
    </div>
</div>
@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    private LoginModel user { get; set; } = new();
    private List<string> errores { get; set; } = [];
    private bool cambiarContraseña { get; set; } = false;

    private PasswordResetModel passwordResetModel { get; set; } = new();
    private async Task IniciarSesionComoGerenteFake()
    {
        user.Correo = "marfacucosas@gmail.com";
        user.Rol = RolUsuario.Gerente;
        await guardarEnCookie("jorge");

    }
    private async Task IniciarSesion()
    {
        errores.Clear();
        if (string.IsNullOrEmpty(user.Correo))
        {
            errores.Add("Por favor, ingrese un correo.");
        }
        else if (!user.Correo.Contains('@'))
        {
            errores.Add("El correo ingresado no es válido.");
        }
        if (string.IsNullOrEmpty(user.Contraseña))
        {
            errores.Add("Por favor, ingrese una contraseña.");
        }
        if (errores.Count > 0)
        {
            return;
        }


        Cliente? cliente = null;
        Personal? personal = casoDeUsoBuscarPersonal.Ejecutar(user.Correo, user.Contraseña);
        if (personal != null)
        {
            user.Rol = personal.Rol;
            if (personal.Rol == RolUsuario.Gerente || personal.Rol == RolUsuario.Administrador)
            {
                String codigo = servicioGenerarCodigo.GenerarCodigoAleatorio();
                servicioEnviarEmail.EnviarEmail(personal.Correo, "Codigo de autenticacion", "Su codigo de autenticacion es : ", codigo);
                casoDeUsoActualizarEstadoDobleAutenticacion.Ejecutar(personal.Id, codigo);
                NavigationManager.NavigateTo("/verificacion-doble-autenticacion");
            }

            else
            {
                await guardarEnCookie(personal.Nombre);
                NavigationManager.NavigateTo("/?justLogged=true");
            }

        }
        else
        {
            cliente = casoDeUsoBuscarCliente.Ejecutar(user.Correo, user.Contraseña);
            if (cliente != null)
            {
                user.Rol = cliente.Rol;
                await guardarEnCookie(cliente.Nombre);
            }
            else
            {
                cliente = null;
                errores.Add("Email o contraseña incorrectos.");
            }
        }


    }
    private void VolverALogin()
    {
        cambiarContraseña = false;
        user = new LoginModel();
        errores.Clear();
    }


    private async Task guardarEnCookie(string nombre)
    {

        var claims = new List<Claim> {
new Claim(ClaimTypes.Name, user.Correo),
new Claim(ClaimTypes.Role, user.Rol.ToString())
};
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo($"/?mensaje=¡Hola {nombre} Bienvenido/a.");

    }

    private async Task EnviarInstruccionesCambioContraseña()
    {


    }
    public class LoginModel
    {
        public string? Contraseña { get; set; }
        public RolUsuario Rol { get; set; }
        public string? Correo { get; set; }
    }

    public class PasswordResetModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Correo { get; set; } = "";
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

}