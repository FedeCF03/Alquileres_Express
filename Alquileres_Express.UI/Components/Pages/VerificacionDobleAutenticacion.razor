@page "/verificacion-doble-autenticacion"
@inject NavigationManager Nav
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Alquileres_Express.Aplicacion.Interfaces
@using Alquileres_Express.Repositorios.RepositorioSQLite
@inject CasoDeUsoValidarCodigoDeSeguridad casoDeUsoValidarCodigoDeSeguridad
<PageTitle>Verificación de Doble Autenticación</PageTitle>

<h3>Verificación</h3>


<EditForm Model="@modelo" OnValidSubmit="ProcesarVerificacion" FormName="CodigoVerificacion">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Email:</label>
        <InputText @bind-Value="modelo.Correo" class="form-control" />
    </div>

    <div class="mb-3">
        <label>Código de verificación:</label>
        <InputText @bind-Value="modelo.Codigo" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Verificar</button>

    @foreach (var error in errores)
    {
        <div class="alert alert-danger mt-2">@error</div>
    }
    @if (!string.IsNullOrEmpty(mensajeExito))
    {
        <div class="alert alert-success mt-2">@mensajeExito</div>
    }
</EditForm>


@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private VerificacionModel modelo { get; set; } = new();
    private List<string> errores = new();
    private string mensajeExito = "";
    private async Task ProcesarVerificacion()
    {
        errores.Clear();
        if (modelo.Codigo.Equals(""))
        {
            errores.Add("Por favor, ingrese un código.");
        }
        if (string.IsNullOrEmpty(modelo.Correo))
        {
            errores.Add("Por favor, ingrese un correo.");
        }
        else
            if (!modelo.Correo.Contains('@'))
            {
                errores.Add("El correo ingresado no es válido.");
            }
        if (errores.Count > 0)
        {
            return;
        }

        Personal? usuario = casoDeUsoValidarCodigoDeSeguridad.Ejecutar(modelo.Correo, modelo.Codigo);
        if (usuario != null)
        {
            await guardarEnCookie(modelo.Correo, usuario.Rol, usuario.Nombre);

        }
        else
        {
            errores.Add("Email o código incorrectos.");
        }
    }

    public class VerificacionModel
    {       
        public string Correo { get; set; } = "";

        public string Codigo { get; set; } = "";
    }

    private async Task guardarEnCookie(String correo, RolUsuario rol, string nombre)
    {

        var claims = new List<Claim> {
new Claim(ClaimTypes.Name, correo),
new Claim(ClaimTypes.Role, rol.ToString())
};
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        NavigationManager.NavigateTo($"/?mensaje=¡Hola {nombre} Bienvenido/a.");
    }
}