@page "/cambiar-contrasena"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using System.Net.Mail
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ServicioGenerarCodigo servicioGenerarCodigo
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject CasoDeUsoBuscarCliente casoDeUsoBuscarCliente
@inject CasoDeUsoBuscarPersonal casoDeUsoBuscarPersonal
@inject CasoDeUsoActualizarEstadoDobleAutenticacion casoDeUsoActualizarEstadoDobleAutenticacion
@inject NavigationManager NavigationManager
@inject ServicioGenerarCodigo servicioGenerarCodigo
@inject ServicioEnviarEmail servicioEnviarEmail

@if (codigo)
{

    <div class="login-container">
        <div class="login-card">

            <h3 class="login-title">Iniciar sesión</h3>

            <EditForm Model="@user" OnValidSubmit="CambiarContraseña" FormName="passWord"> >
                <DataAnnotationsValidator />

                <div class="form-group">
                    <label for="username">Email</label>
                    <InputText id="username" @bind-Value="user.Correo" class="form-control"
                        placeholder="Ingrese su usuario" />
                </div>

                <div class="form-group">
                    <label for="password">Contraseña nueva</label>
                    <InputText id="password" @bind-Value="user.Contraseña" type="password" class="form-control"
                        placeholder="Ingrese su contraseña" />
                </div>
                <div class="login-links">
                    <a href="/forgot-password" class="link-secondary">¿Olvidaste tu contraseña?</a>
                </div>
                <button type="submit" class="btn-primary">Ingresar</button>

            </EditForm>



            @foreach (var error in errores)
            {
                <div class="alert alert-danger mt-2">@error</div>
            }
        </div>
    </div>
}
@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    private PasswordResetModel user { get; set; } = new();
    private List<string> errores { get; set; } = [];
    private bool codigo = false;
    private string codigoVerificacion { get; set; } = string.Empty;

    private void CambiarContraseña()
    {

    }
    private PasswordResetModel passwordResetModel { get; set; } = new();




    public class PasswordResetModel
    {
        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "Formato de email inválido")]
        public string Correo { get; set; } = "";
        public string Contraseña { get; set; } = "";
    }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
    }

}