@page "/cargar-inmueble"
@rendermode InteractiveServer
@inject NavigationManager Nav

@using System.Security.Claims
@inject IRepositorioInmueble RepositorioInmueble
@inject CasoDeUsoAltaInmueble CasoDeUsoAltaInmueble
@using Microsoft.AspNetCore.Authorization
@using Alquileres_Express.Aplicacion.Enumerativo
@inject IConfiguration config
@inject IHttpContextAccessor HttpContextAccessor
@inject ServicioFotos ServicioFotos
@attribute [Authorize (Roles = "Administrador, Gerente")]
@inject IJSRuntime JS


<PageTitle>Cargar inmueble</PageTitle>

<label class="form-label">Cargar Inmueble</label>
<label class="form-label">Por favor, complete los siguientes campos:</label>
<label class="form-label">Nombre del Inmueble</label>
<input required=true type="text" @bind="inmueble.Nombre" placeholder="Nombre del Inmueble" class="form-control mb-2" />
<label class="form-label">Ciudad del Inmueble</label>
<input required=true type=" text" @bind="inmueble.Ciudad" placeholder="Ciudad del Inmueble" class="form-control mb-2" />

<label class="form-label">Dirección del Inmueble</label>
<input required=true type="text" @bind="inmueble.Direccion" placeholder="Dirección del Inmueble" class="form-control mb-2" />
<label class="form-label">Precio por día del Inmueble</label>
<input required=true type="number" @bind="inmueble.Precio" placeholder="Precio del Inmueble" class="form-control mb-2" />
<label class="form-label">Cantidad de camas del Inmueble</label>
<input required=true type="number" @bind="inmueble.CantidadDeCamas" placeholder="Cantidad de camas" class="form-control mb-2" />
<label class="form-label">Cantidad de baños del Inmueble</label>
<input required=true type="number" @bind="inmueble.Banios" placeholder="Cantidad de baños" class="form-control mb-2" />
<label for="type">Elija un tipo de inmueble:</label>

<select @bind=inmueble.TipoInmueble required=true name="cars" id="cars">
<option value=@TipoDeInmueble.Vivienda >Vivienda</option>
<option value="@TipoDeInmueble.Negocio">Negocio</option>
<option value="@TipoDeInmueble.Garaje">Garaje</option>
</select>



<p> Por favor, elija una ubicación en el mapa para el Inmueble con el marcador</p> 
 <div id="map" style="height: 400px; width: 80%;">

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB_9xydGamrZY4fHXdj39zwJPV-4FCUzbQ&callback=initializeMap" async
    defer></script>
<script>
    function initializeMap(dotNetHelper) {
        const initialPosition = { lat: -34.6037, lng: -58.3816 };// Coordenadas de Buenos Aires
        const initialMarkerPosition = {lat: 0, lng: 0};

        const map = new google.maps.Map(document.getElementById("map"), {
            center: initialPosition,
            zoom: 12,
        });

        const marker = new google.maps.Marker({
            position: initialMarkerPosition,
            map: map,
            draggable: true,
        });

        // Actualizar coordenadas al mover el marcador
        marker.addListener("dragend", () => {
            const position = marker.getPosition();
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', position.lat(), position.lng());
        });

        // Permitir al usuario colocar un nuevo marcador al hacer clic en el mapa
        map.addListener("click", (event) => {
            marker.setPosition(event.latLng);
            dotNetHelper.invokeMethodAsync('ActualizarCoordenadas', event.latLng.lat(), event.latLng.lng());
        });
    }

</script>
</div> 
<InputFile @key=@(inputFileId) OnChange="CaptureFiles" multiple/>
<button @onclick="GuardarFotos" class="btn btn-primary">Subir fotos</button>

<button class="btn btn-primary" @onclick="() => Cargar()">Cargar Inmueble</button>


<div class="image-list">
    @foreach (var foto in fotos)
    {
        <div class="image-card">
            <img src="@foto.Url" />
            <button @onclick="()=>EliminarFoto(foto.Nombre)">Eliminar</button>
        </div>
    }
</div>

@if (errores.Count > 0)
    {
        <div class="alert alert-danger">
            @foreach (var error in errores)
            {
                <p>@error</p>
            }
        </div>
    }
@if (errorPorFaltaDeFotos != string.Empty)
    {
        <div class="alert alert-danger">
            <p>@errorPorFaltaDeFotos</p>
        </div>
    }

@if (mensajeError != string.Empty)
    {
        <div class="alert alert-danger">
            <p>@mensajeError</p>
        </div>
    }

@code {
    Inmueble inmueble = new();
    public HttpContext? HttpContext { get; set; }

    private double Latitud { get; set; }
    private double Longitud { get; set; }
    private string mensajeError = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5; // 5 MB
    private int maxAllowedFiles = 30;
    private List<String> errores = new();
    private string errorPorFaltaDeFotos = string.Empty;
    private List<Foto> fotos = new();
    private Guid inputFileId = Guid.NewGuid();
    private InputFileChangeEventArgs? browser;
    private void Cargar()
    {
        inmueble.CoordLat = Latitud;
        inmueble.CoordLong = Longitud;
        inmueble.Disponible = true;
        if (fotos.Count == 0)
        {
            errorPorFaltaDeFotos = "Debe cargar al menos una foto del inmueble.";
            StateHasChanged();
            return;
        }   
        if (errores.Count == 0 & CasoDeUsoAltaInmueble.Ejecutar(inmueble,RolUsuario.Gerente, out mensajeError) != -1){
            ServicioFotos.PersistirFotos(fotos, inmueble.Id);
            Nav.NavigateTo("/");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
         if (firstRender)
        {
            var dotNetRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initializeMap", dotNetRef);
        }


    }

    [JSInvokable]
    public void ActualizarCoordenadas(double lat, double lng)
    {
        Latitud = lat;
        Longitud = lng;
        StateHasChanged(); 
        // Actualizar la interfaz de usuario
        
    }


    private void EliminarFoto(string nombre)
    {
        var foto = fotos.FirstOrDefault(f => f.Nombre == nombre);
        if (foto != null)
        {
            fotos.Remove(foto);
            File.Delete(Path.Combine(ServicioFotos.DevolverPathDelDirectorio(), nombre));
            StateHasChanged();
        }
    }
    
    private async Task GuardarFotos()
    {
        try
        {
            errores.Clear();
            if (browser == null || browser.FileCount == 0)
            {
                errores.Add("No se ha seleccionado ningún archivo.");
                return;
            }
            errorPorFaltaDeFotos = string.Empty;

            if (browser.FileCount > maxAllowedFiles)
            {
                errores.Add($"No se pueden cargar más de {maxAllowedFiles} archivos.");
                return;
            }   
            foreach(var file in browser.GetMultipleFiles(maxAllowedFiles))
            {
                try{
                    if (file.Size > maxFileSize)
                    {
                        errores.Add($"El archivo {file.Name} excede el tamaño máximo permitido de 5 MB y no se podrá agregar. Por favor elija otra foto");
                        return;

                    }

                    else
                    {
                        crearArchivo(file);
                    }

                }
                catch (Exception ex)
                {
                    errores.Add($"Error al cargar el archivo {file.Name}: {ex.Message}");
                }
            }
        }
        finally 
        {
            inputFileId = Guid.NewGuid();
            StateHasChanged();
        }
    }
    private async Task CaptureFiles(InputFileChangeEventArgs e)
    {
        browser = e;
    }

    private async void crearArchivo(IBrowserFile file)
    {
        string newFileName = Path.ChangeExtension(
                    Path.GetRandomFileName(), 
                    Path.GetExtension(file.Name));
                    
                var pathFotosInmuebles = Path.GetFullPath(
                    Path.Combine(
                        Directory.GetCurrentDirectory(),
                       "wwwroot", "images","fotosInmuebles"));

                Directory.CreateDirectory(pathFotosInmuebles);

                var path = Path.Combine(pathFotosInmuebles, newFileName);
        
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                fotos.Add(new Foto
                {
                    Url = $"/images/fotosInmuebles/{newFileName}",
                    Nombre = newFileName,
                });
                StateHasChanged();
    }

}

<style>
    .image-list {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
}

.image-card {
    border: 1px solid #ccc;
    padding: 1rem;
    border-radius: 8px;
    text-align: center;
}
</style>