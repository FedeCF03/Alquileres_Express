@page "/listadoClientesNuevos"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
@inject CasoDeUsoObtenerTodos CasoDeUsoObtenerTodos


<body>
    <div class="revenue-dashboard">
        @if(mostrar){
            <div class="hero-section">
                <div class="revenue-summary-card">
                    <div class="card-background-pattern"></div>
                    <div class="revenue-content">
                        <div class="revenue-header">
                            <div class="revenue-icon-container">
                                <i class="fas fa-chart-trending-up"></i>
                            </div>
                            <div class="revenue-details">
                                <h2 class="revenue-label">Total del clientes</h2>
                                <div class="revenue-amount">@totalClientes()</div>
                            </div>
                         </div>
                        <div class="revenue-actions">
                            <button class="action-button">
                                <button class="btn btn-outline-secondary" @onclick="Ocultar">
                                    <i class="fas fa-eye-slash me-1"></i>
                                        Ocultar detalle
                                </button>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="control-panel">
            <div class="filter-controls">
                <div class="date-filter-wrapper">
                    <div class="filter-label">
                        <i class="fas fa-calendar-range"></i>
                        <span>Seleccionar rango de fechas</span>
                    </div>
                    <div class="date-picker-section">
                        <div class="date-picker-container">
                            <div class="date-fields">
                                <div class="date-field">
                                    <label>Comienzo</label>
                                    <div class="date-value">@(StartDate?.ToString("dd/M/yyyy") ?? "Seleccionar")</div>
                                </div>
                                <div class="date-separator"></div>
                                    <div class="date-field">
                                        <label>Fin</label>
                                        <div class="date-value">@(EndDate?.ToString("dd/M/yyyy") ?? "Seleccionar")</div>
                                    </div>
                                <DateRangePicker StartDatePlaceholder="Comienzo" EndDatePlaceholder="Fin"
                                @bind-StartDate="StartDate" @bind-EndDate="EndDate"
                                class="hidden-picker"
                                placeholder="Select dates..." OnRangeSelect="Filtrar" OnCancel="Cancelar"/>
                            </div>   
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="data-section">
            <div class="section-header">
                <div class="section-title">
                    <i class="fas fa-table"></i>
                    <h3>Registro de nuevos clientes </h3>
                </div>
            </div>
            
            <div class="table-wrapper">
                <table class="data-table">
                    <thead>
                        <tr>
                            <th class="date-column">
                                <div class="column-header">
                                    <i class="fas fa-calendar-day"></i>
                                    <span>Fecha de registro</span>
                                </div>
                            </th>
                            <th class="date-column">
                                <div class="column-header">
                                    <i class="fas fa-calendar-day"></i>
                                    <span>Nombre completo</span>
                                </div>
                            </th>
                            <th class="amount-column">
                                <div class="column-header">
                                    <i class="fas fa-money-bill-wave"></i>
                                    <span>Email</span>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var cliente in clientesFiltrados)
                        {
                            <tr>
                                <td>@cliente.FechaCreacionCuenta.ToString("dd/MM/yyyy")</td>
                                <td class="text-start">@cliente.Nombre&nbsp;@cliente.Apellido</td>
                                <td class="text-start">@cliente.Correo</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</body>

@code{
    DateTimeOffset? StartDate { get; set; } 
    DateTimeOffset? EndDate { get; set; } 

    public List<Cliente> clientes { get; set; } = [];
    public List<Cliente> clientesFiltrados { get; set; } = [];
    public int cantidadDeClientes { get; set; }

    Boolean mostrar;

    bool pickerVisible;

    protected override void OnParametersSet()
    {
        clientes = CasoDeUsoObtenerTodos.Ejecutar();
        mostrar = false;
        clientesFiltrados.AddRange(clientes);
        clientesFiltrados.Sort((x, y) => x.FechaCreacionCuenta.CompareTo(y.FechaCreacionCuenta));
    }

    private int totalClientes(){
       return clientesFiltrados.Count;
    }


    private void Filtrar()
    {
        DateTime fecha1 = StartDate?.UtcDateTime ?? DateTime.MinValue;
        DateTime fecha2 = EndDate?.UtcDateTime ?? DateTime.MinValue;
        clientesFiltrados.Clear();
        foreach (var cliente in clientes)
        {
            if (cliente.FechaCreacionCuenta >= fecha1 && cliente.FechaCreacionCuenta <= fecha2)
            {
                clientesFiltrados.Add(cliente);
            }
        }
        cantidadDeClientes = totalClientes();
        clientesFiltrados.Sort((x, y) => x.FechaCreacionCuenta.CompareTo(y.FechaCreacionCuenta));
        mostrar = true;
        StateHasChanged();
    }

    private void Ocultar()
    {
        mostrar = false;
        StateHasChanged();
    }

    private void Cancelar()
    {
        StartDate = null;
        EndDate = null;
        clientesFiltrados.Clear();
        clientesFiltrados.AddRange(clientes);
        clientesFiltrados.Sort((x, y) => x.FechaCreacionCuenta.CompareTo(y.FechaCreacionCuenta));
        mostrar = false;
        StateHasChanged();
    }

}

<style>
    .property-rating i {
        font-size: 1rem;
    }

    .property-rating .text-secondary {
        font-size: 0.9rem;
    }

    .promedio-numero {
        font-size: 1.25rem;
        /* o probá con 1.3rem si querés más presencia */
        font-weight: 600;
        color: #343a40;
        /* o el color que combine con tu estética */
    }

    .hidden-picker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
    body {
     background-image: linear-gradient(to right, rgb(222, 42, 42) , rgb(151, 37, 19)) !important;   /*esto es para el color del fondo y que no se ponga blanco  */
}
</style>