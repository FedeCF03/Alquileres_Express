@page "/listadoClientesNuevos"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@using BlazorDateRangePicker
@inject CasoDeUsoObtenerTodos CasoDeUsoObtenerTodos

  <div class="container py-4">

    @if (mostrar)
    {
        <div class="card mb-4 shadow-sm total-card border-0">
            <div class="card-body d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="mb-1">üìå Total de clientes</h5>
                    <h2 class="fw-bold m-0">@totalClientes()</h2>
                </div>

                <button class="btn btn-outline-secondary" @onclick="Ocultar">
                    <i class="fas fa-eye-slash me-1"></i>
                    Ocultar detalle
                </button>
            </div>
        </div>
    }

    <div class="card border-0 shadow-sm mx-auto mb-3" style="max-width: 260px;">
    <div class="card-body p-3">   

        <label class="form-label fw-semibold mb-2">Rango de fechas</label>

      
        <button class="btn btn-outline-primary btn-sm w-100 range-display"
                @onclick="() => pickerVisible = true">
            @if (StartDate is not null && EndDate is not null)
            {
                @($"{StartDate:dd/M/yyyy} ‚ü∂ {EndDate:dd/M/yyyy}")
            }
            else
            {
                <span class="text-muted">Seleccionar rango‚Ä¶</span>
            }
        </button>

        <DateRangePicker class="hidden-picker"
                         style="@(pickerVisible ? "opacity:1;pointer-events:auto;" : string.Empty)"
                         @bind-StartDate="StartDate"
                         @bind-EndDate="EndDate"
                         DaysEnabledFunction="(d) => NoEsHabil(d)"
                         OnRangeSelect="Filtrar" />
        </div>
    </div>  

    <div class="card shadow-sm border-0">
        <div class="card-body p-0">
            <table class="table table-hover table-striped align-middle text-center mb-0">
                <thead class="table-primary">
                    <tr>
                        <th style="width: 160px;">Fecha de registro</th>
                        <th>Nombre completo</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var cliente in clientes)
                    {
                        <tr>
                            <td>@cliente.FechaCreacionCuenta.ToString("dd/MM/yyyy")</td>
                            <td class="text-start">@cliente.Nombre&nbsp;@cliente.Apellido</td>
                            <td class="text-start">@cliente.Correo</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code{
    DateTimeOffset? StartDate { get; set; } 
    DateTimeOffset? EndDate { get; set; } 

    public List<Cliente>? clientes { get; set; }
    public int cantidadDeClientes { get; set; }

    Boolean mostrar;

    bool pickerVisible;

    protected override void OnParametersSet()
    {
        clientes = CasoDeUsoObtenerTodos.Ejecutar();
        mostrar = false;
    }

    private int totalClientes(){
        if(clientes.Count == 0)
        {
            return 0;
        }
        else{
            return clientes.Count;
        }
    }


    private void Filtrar()
    {
        DateTime fecha1 = StartDate?.UtcDateTime ?? DateTime.MinValue;
        DateTime fecha2 = EndDate?.UtcDateTime ?? DateTime.MinValue;
        List<Cliente> clientesFiltrados = new List<Cliente>();
        bool rangoValido;
        foreach (var cliente in clientes)
        {
            rangoValido = false;
            rangoValido = cliente.FechaCreacionCuenta >= fecha1 && cliente.FechaCreacionCuenta <= fecha2;
            if (rangoValido)
            {
                clientesFiltrados.Add(cliente);
            }
        }
        clientes.Clear();
        clientes.AddRange(clientesFiltrados);
        cantidadDeClientes = totalClientes();
        mostrar = true;
        StateHasChanged();
    }

    private void Ocultar()
    {
        mostrar = false;
        StateHasChanged();
    }

    private bool NoEsHabil(DateTimeOffset date)
    {
        return true;
    }
}

<style>
    .property-rating i {
        font-size: 1rem;
    }

    .property-rating .text-secondary {
        font-size: 0.9rem;
    }

    .promedio-numero {
        font-size: 1.25rem;
        /* o prob√° con 1.3rem si quer√©s m√°s presencia */
        font-weight: 600;
        color: #343a40;
        /* o el color que combine con tu est√©tica */
    }

    .hidden-picker {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        cursor: pointer;
    }
</style>