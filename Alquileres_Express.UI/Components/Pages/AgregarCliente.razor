@page "/usuario"
@rendermode InteractiveServer
@inject NavigationManager Navegador
@inject CasoDeUsoAltaCliente casoDeUsoAltaCliente
@using BlazorDateRangePicker
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ServicioEnviarEmail servicioEnviarEmail

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div 
        class="alert alert-danger">@ErrorMessage
    </div>
}

    <div class="login-card">
        <h3 class="login-title">Registrate</h3>

        <div class="mb-2">
            <label>Nombre</label>
            <input @bind="_cliente.Nombre" class="form-control" />
        </div>

        <div class="mb-2">
            <label>Apellido</label>
            <input @bind="_cliente.Apellido" class="form-control" />
        </div>

        <div class="mb-2">
            <label>DNI</label>
            <input @bind="_cliente.Dni" class="form-control" />
        </div>

        <div class="mb-2">
            <label>Correo</label>
            <input @bind="_cliente.Correo" class="form-control" />
        </div>

        <AuthorizeView>
            <NotAuthorized>
                <div class="mb-2">
                    <label>Contraseña</label>
                    <input @bind="_cliente.Contraseña" type="password" class="form-control" />
                </div>
            </NotAuthorized>
        </AuthorizeView>
        <div class="mb-2">
            <label>Dirección</label>
            <input @bind="_cliente.Direccion" class="form-control" />
        </div>

        <div class="mb-2">
            <label>Fecha de Nacimiento</label>
            <div class="d-flex">
                <DateRangePicker 
                @bind-Value="date" 
                         Placeholder="Selecciona tu fecha de nacimiento"  
                         SingleDatePicker="true"
                         MaxDate="@DateTime.Now"
                         MinDate="@fechaMinima">
                </DateRangePicker>
            </div>
        </div>
    </div>

<button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>

@code {
    DateTimeOffset? date;
    private DateTime fechaMinima = new DateTime(1900, 1, 1);
    private Cliente _cliente = new Cliente();
    private string? ErrorMessage;
    [CascadingParameter]

    public HttpContext? HttpContext { get; set; }

    private int? selectedDay;
    private int? selectedMonth;
    private int? selectedYear;
    private string? rol;
    private string? correoDelUsuarioEjecutando;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity != null && HttpContext.User.Identity.IsAuthenticated)
        {
            correoDelUsuarioEjecutando = user.Identity.Name;
            rol = user.FindFirst(ClaimTypes.Role)?.Value;
            if (rol != null && rol.Equals("Cliente", StringComparison.OrdinalIgnoreCase))
            {
                Navegador.NavigateTo("/");
            }
        }
    }

    private void Aceptar()
    {
        ErrorMessage = null;

        if (selectedDay == null || selectedMonth == null || selectedYear == null)
        {
            ErrorMessage = "Por favor, seleccioná día, mes y año de nacimiento.";
            return;
        }

        try
        {
            _cliente.FechaNacimiento = new DateTime(
            selectedYear.Value,
            selectedMonth.Value,    
            selectedDay.Value);
            if (!String.Equals(rol, "Cliente", StringComparison.OrdinalIgnoreCase))
                _cliente.Contraseña= _cliente.Dni; // Asignar DNI como contraseña}
            bool ok = casoDeUsoAltaCliente.Ejecutar(_cliente);
            if (!String.Equals(rol, "Cliente", StringComparison.OrdinalIgnoreCase))
                servicioEnviarEmail.EnviarEmail(_cliente.Correo, "Usuario registrado", "Su usuario ha sido registrado correctamente. por favor cambie la contraseña lo antes posible. Constraseña: ", _cliente.Contraseña);
            if (ok)
            {
                _cliente = new Cliente();
                selectedDay = selectedMonth = selectedYear = null;
                ErrorMessage = "Se registró un nuevo cliente correctamente.";
            }
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ocurrió un error inesperado: " + ex.Message;
        }
    }
}