@rendermode InteractiveServer
@inject CasoDeUsoListarComentarios casoDeUsoListarComentarios
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CasoDeUsoBuscarPersonalPorCorreo CasoDeUsoBuscarPersonalPorCorreo
@inject CasoDeUsoBuscarClientePorCorreo CasoDeUsoBuscarClientePorCorreo
@inject CasoDeUsoEliminarComentario CasoDeUsoEliminarComentario
@inject CasoDeUsoAgregarComentario CasoDeUsoAgregarComentario
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Components.Authorization

@if (comentarios.Count == 0)
{
    <p class="sin-comentarios">No hay comentarios disponibles para este inmueble.</p>
}
else
{
    <div class="comentarios-container">
        @foreach (var comentario in comentarios)
        {
           <MostrarComentario InmuebleDelComentarioOriginal=comentario.InmuebleId!.Value Comentario="comentario" Correo="@Correo" OnEliminar="EliminarComentarioAs" />
        }
    </div>
}
@if (usuario != null)
{
    <button class="btn-comentar" @onclick="ToggleFormularioComentario">
        @((mostrarFormulario) ? "Cancelar" : "Comentar")
    </button>

    @if (mostrarFormulario)
    {
        <div class="formulario-comentario">
            <textarea placeholder="Escribe tu comentario..." @bind="nuevoComentario.Texto"></textarea>
        </div>
        <button class="btn-agregar" @onclick="AgregarComentario">Agregar comentario</button>

    }
    @foreach (var error in errores)
    {
        <div class="alert alert-danger">@error</div>
    }
}
@code
{
    [Parameter]
    public int InmuebleId { get; set; }
    private List<Comentario> comentarios = [];
    [Parameter]
    public string Correo {get; set;} = "";
    private Usuario? usuario;
    private bool mostrarFormulario = false;
    private bool mostrarRespuestas = false;
    private int mostrarFormularioRespuestaDeComentario = 0; 
    private List<string> errores = [];
    private Comentario nuevoComentario = new ();
    private Comentario respuesta = new ();
    
    protected override void OnParametersSet()
    {
        if (InmuebleId <= 0)
        {
            throw new ArgumentException("El Id del inmueble debe ser mayor que cero.", nameof(InmuebleId));
        }

        comentarios = casoDeUsoListarComentarios.ListarComentariosPorInmuebleId(InmuebleId);
        usuario = (Usuario?)CasoDeUsoBuscarClientePorCorreo.Ejecutar(Correo) ??
                 (Usuario?) CasoDeUsoBuscarPersonalPorCorreo.Ejecutar(Correo);
        nuevoComentario = InicializarComentario();

    }
    private void ToggleFormularioComentario()
    {
        mostrarFormulario = !mostrarFormulario;
    }
    private void ToggleMostrarRespuestas()
    {
        mostrarRespuestas = !mostrarRespuestas;
    }
    private void ToggleFormularioRespuesta(int comentarioId)
    {
        if (mostrarFormularioRespuestaDeComentario == comentarioId)
        {
            mostrarFormularioRespuestaDeComentario = 0; // Ocultar el formulario
        }
        else
        {
            mostrarFormularioRespuestaDeComentario = comentarioId; // Mostrar el formulario para ese comentario
            respuesta = InicializarComentario(); 
            respuesta.ComentarioId = comentarioId; 
            respuesta.InmuebleId = null;
        }
        
    }

    private void AgregarComentario()
    {
        errores.Clear();
        if (CasoDeUsoAgregarComentario.Ejecutar(nuevoComentario, out errores))
        {
            mostrarFormulario = false; // Ocultar el formulario después de agregar
            comentarios.Add(nuevoComentario);
        }
        nuevoComentario = InicializarComentario();
        StateHasChanged();
    }

    private Comentario InicializarComentario()
    {
        if (usuario == null)
        {
            return new Comentario();
        }
        Comentario c;
        if (usuario!.Rol == RolUsuario.Cliente)
        {
            c = new Comentario()
            {
                InmuebleId = InmuebleId,
                RolUsuario = usuario!.Rol,
                ClienteId = usuario!.Id,
                NombreUsuario = usuario!.Nombre + " " + usuario!.Apellido, 
            };
        }
        else
        {
            c = new Comentario()
            {
                InmuebleId = InmuebleId,
                RolUsuario = usuario!.Rol,
                PersonalId = usuario!.Id,
                NombreUsuario = usuario!.Nombre + " " + usuario!.Apellido, 
            };
        }
        c.Fecha = DateTime.Now;
        return c;
    }
    private void EditarComentario(int id)
    {
        // Lógica de edición: podrías navegar a otro componente o mostrar un modal
        Console.WriteLine($"Editar comentario con ID: {id}");
    }

    private async Task EliminarComentarioAs(int id)
    {
        if (await CasoDeUsoEliminarComentario.EjecutarAsync(id))
        {
            Comentario comentario = comentarios.FirstOrDefault(c => c.Id == id)!;
            comentarios.Remove(comentario);
        }
        //NavigationManager.NavigateTo($"/inmueble/{InmuebleId}", true);
        StateHasChanged();
    }
}
